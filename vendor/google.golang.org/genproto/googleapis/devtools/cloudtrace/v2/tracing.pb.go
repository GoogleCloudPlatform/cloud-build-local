// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/devtools/cloudtrace/v2/tracing.proto

package cloudtrace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf4 "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request message for the `BatchWriteSpans` method.
type BatchWriteSpansRequest struct {
	// Required. Name of the project where the spans belong. The format is
	// `projects/PROJECT_ID`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A collection of spans.
	Spans []*Span `protobuf:"bytes,2,rep,name=spans" json:"spans,omitempty"`
}

func (m *BatchWriteSpansRequest) Reset()                    { *m = BatchWriteSpansRequest{} }
func (m *BatchWriteSpansRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchWriteSpansRequest) ProtoMessage()               {}
func (*BatchWriteSpansRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *BatchWriteSpansRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BatchWriteSpansRequest) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func init() {
	proto.RegisterType((*BatchWriteSpansRequest)(nil), "google.devtools.cloudtrace.v2.BatchWriteSpansRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TraceService service

type TraceServiceClient interface {
	// Sends new spans to Stackdriver Trace or updates existing traces. If the
	// name of a trace that you send matches that of an existing trace, new spans
	// are added to the existing trace. Attempt to update existing spans results
	// undefined behavior. If the name does not match, a new trace is created
	// with given set of spans.
	BatchWriteSpans(ctx context.Context, in *BatchWriteSpansRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error)
	// Creates a new Span.
	CreateSpan(ctx context.Context, in *Span, opts ...grpc.CallOption) (*Span, error)
}

type traceServiceClient struct {
	cc *grpc.ClientConn
}

func NewTraceServiceClient(cc *grpc.ClientConn) TraceServiceClient {
	return &traceServiceClient{cc}
}

func (c *traceServiceClient) BatchWriteSpans(ctx context.Context, in *BatchWriteSpansRequest, opts ...grpc.CallOption) (*google_protobuf4.Empty, error) {
	out := new(google_protobuf4.Empty)
	err := grpc.Invoke(ctx, "/google.devtools.cloudtrace.v2.TraceService/BatchWriteSpans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceServiceClient) CreateSpan(ctx context.Context, in *Span, opts ...grpc.CallOption) (*Span, error) {
	out := new(Span)
	err := grpc.Invoke(ctx, "/google.devtools.cloudtrace.v2.TraceService/CreateSpan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TraceService service

type TraceServiceServer interface {
	// Sends new spans to Stackdriver Trace or updates existing traces. If the
	// name of a trace that you send matches that of an existing trace, new spans
	// are added to the existing trace. Attempt to update existing spans results
	// undefined behavior. If the name does not match, a new trace is created
	// with given set of spans.
	BatchWriteSpans(context.Context, *BatchWriteSpansRequest) (*google_protobuf4.Empty, error)
	// Creates a new Span.
	CreateSpan(context.Context, *Span) (*Span, error)
}

func RegisterTraceServiceServer(s *grpc.Server, srv TraceServiceServer) {
	s.RegisterService(&_TraceService_serviceDesc, srv)
}

func _TraceService_BatchWriteSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchWriteSpansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServiceServer).BatchWriteSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudtrace.v2.TraceService/BatchWriteSpans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServiceServer).BatchWriteSpans(ctx, req.(*BatchWriteSpansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraceService_CreateSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Span)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServiceServer).CreateSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudtrace.v2.TraceService/CreateSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServiceServer).CreateSpan(ctx, req.(*Span))
	}
	return interceptor(ctx, in, info, handler)
}

var _TraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.cloudtrace.v2.TraceService",
	HandlerType: (*TraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchWriteSpans",
			Handler:    _TraceService_BatchWriteSpans_Handler,
		},
		{
			MethodName: "CreateSpan",
			Handler:    _TraceService_CreateSpan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/devtools/cloudtrace/v2/tracing.proto",
}

func init() { proto.RegisterFile("google/devtools/cloudtrace/v2/tracing.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x8b, 0x13, 0x31,
	0x18, 0xc6, 0xc9, 0xf8, 0x07, 0x8c, 0x82, 0x10, 0xb0, 0x94, 0x51, 0xb1, 0x8e, 0xa0, 0x75, 0x2a,
	0x09, 0x8e, 0x78, 0xb0, 0xe2, 0xa5, 0x45, 0x7a, 0x2d, 0xad, 0x54, 0x90, 0x5e, 0xd2, 0x69, 0x8c,
	0x91, 0x99, 0x64, 0x9c, 0xa4, 0x03, 0x22, 0xbd, 0x78, 0xf3, 0xac, 0x9f, 0x42, 0xf6, 0xb2, 0x5f,
	0x63, 0xaf, 0xfb, 0x15, 0xf6, 0x83, 0x2c, 0x49, 0x66, 0xb6, 0x50, 0xba, 0x6d, 0x6f, 0xc9, 0xfb,
	0xfe, 0xf2, 0xbc, 0xef, 0xf3, 0xcc, 0xc0, 0x1e, 0x57, 0x8a, 0x67, 0x8c, 0x2c, 0x59, 0x65, 0x94,
	0xca, 0x34, 0x49, 0x33, 0xb5, 0x5a, 0x9a, 0x92, 0xa6, 0x8c, 0x54, 0x09, 0xb1, 0x07, 0x21, 0x39,
	0x2e, 0x4a, 0x65, 0x14, 0x7a, 0xec, 0x61, 0xdc, 0xc0, 0x78, 0x03, 0xe3, 0x2a, 0x09, 0x1f, 0xd5,
	0x5a, 0xb4, 0x10, 0x84, 0x4a, 0xa9, 0x0c, 0x35, 0x42, 0x49, 0xed, 0x1f, 0x87, 0x2f, 0x0f, 0x4f,
	0x62, 0x35, 0xfa, 0xb0, 0x46, 0xdd, 0x6d, 0xb1, 0xfa, 0x4a, 0x58, 0x5e, 0x98, 0x9f, 0x75, 0xf3,
	0xc9, 0x76, 0xd3, 0x88, 0x9c, 0x69, 0x43, 0xf3, 0xc2, 0x03, 0x11, 0x87, 0xad, 0x01, 0x35, 0xe9,
	0xb7, 0xcf, 0xa5, 0x30, 0x6c, 0x5a, 0x50, 0xa9, 0x27, 0xec, 0xc7, 0x8a, 0x69, 0x83, 0x10, 0xbc,
	0x29, 0x69, 0xce, 0xda, 0xa0, 0x03, 0xba, 0x77, 0x26, 0xee, 0x8c, 0xde, 0xc1, 0x5b, 0xda, 0x32,
	0xed, 0xa0, 0x73, 0xa3, 0x7b, 0x37, 0x79, 0x86, 0xf7, 0x7a, 0xc4, 0x56, 0x6f, 0xe2, 0x5f, 0x24,
	0xa7, 0x01, 0xbc, 0xf7, 0xc9, 0x36, 0xa6, 0xac, 0xac, 0x44, 0xca, 0xd0, 0x3f, 0x00, 0xef, 0x6f,
	0x8d, 0x46, 0x6f, 0x0f, 0x08, 0xee, 0x5e, 0x35, 0x6c, 0x35, 0xcf, 0x1a, 0x9b, 0xf8, 0xa3, 0xcd,
	0x20, 0x4a, 0x7e, 0x9f, 0x5f, 0xfc, 0x0d, 0x5e, 0x45, 0x2f, 0x6c, 0x66, 0xbf, 0xac, 0x83, 0x0f,
	0x45, 0xa9, 0xbe, 0xb3, 0xd4, 0x68, 0x12, 0xaf, 0x7d, 0x8a, 0xba, 0xbf, 0xb8, 0x12, 0xed, 0x83,
	0x18, 0xfd, 0x01, 0x10, 0x0e, 0x4b, 0x46, 0xfd, 0x08, 0x74, 0x8c, 0xc5, 0xf0, 0x18, 0x28, 0x7a,
	0xed, 0x96, 0xe9, 0x85, 0xcf, 0x77, 0x2d, 0x53, 0xef, 0x42, 0x62, 0xe2, 0xd2, 0x22, 0xf1, 0xba,
	0x0f, 0xe2, 0xc1, 0x09, 0x80, 0x4f, 0x53, 0x95, 0xef, 0x57, 0x1f, 0xb8, 0x58, 0x85, 0xe4, 0x63,
	0x6b, 0x7e, 0x0c, 0xbe, 0x8c, 0x6a, 0x9c, 0xab, 0x8c, 0x4a, 0x8e, 0x55, 0xc9, 0x09, 0x67, 0xd2,
	0x45, 0x43, 0x7c, 0x8b, 0x16, 0x42, 0x5f, 0xf3, 0x6b, 0xbd, 0xdf, 0xdc, 0xfe, 0x07, 0x0f, 0x46,
	0x5e, 0x69, 0x68, 0x6b, 0xd8, 0x7d, 0x3d, 0x3c, 0x4b, 0xce, 0x9a, 0xfa, 0xdc, 0xd5, 0xe7, 0xae,
	0x3e, 0x9f, 0x25, 0x8b, 0xdb, 0x6e, 0xc6, 0x9b, 0xcb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x80,
	0xe7, 0x5c, 0x27, 0x03, 0x00, 0x00,
}

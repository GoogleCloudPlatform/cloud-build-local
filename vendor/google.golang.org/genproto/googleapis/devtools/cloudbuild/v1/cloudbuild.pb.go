// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/devtools/cloudbuild/v1/cloudbuild.proto

/*
Package cloudbuild is a generated protocol buffer package.

It is generated from these files:
	google/devtools/cloudbuild/v1/cloudbuild.proto

It has these top-level messages:
	RetryBuildRequest
	RunBuildTriggerRequest
	StorageSource
	RepoSource
	Source
	BuiltImage
	BuildStep
	Volume
	Results
	Build
	Artifacts
	TimeSpan
	BuildOperationMetadata
	SourceProvenance
	FileHashes
	Hash
	Secret
	CreateBuildRequest
	GetBuildRequest
	ListBuildsRequest
	ListBuildsResponse
	CancelBuildRequest
	BuildTrigger
	CreateBuildTriggerRequest
	GetBuildTriggerRequest
	ListBuildTriggersRequest
	ListBuildTriggersResponse
	DeleteBuildTriggerRequest
	UpdateBuildTriggerRequest
	BuildOptions
*/
package cloudbuild

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "google.golang.org/genproto/googleapis/api/httpbody"
import _ "google.golang.org/genproto/googleapis/cloud/audit"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import google_protobuf4 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf5 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Possible status of a build or build step.
type Build_Status int32

const (
	// Status of the build is unknown.
	Build_STATUS_UNKNOWN Build_Status = 0
	// Build or step is queued; work has not yet begun.
	Build_QUEUED Build_Status = 1
	// Build or step is being executed.
	Build_WORKING Build_Status = 2
	// Build or step finished successfully.
	Build_SUCCESS Build_Status = 3
	// Build or step failed to complete successfully.
	Build_FAILURE Build_Status = 4
	// Build or step failed due to an internal cause.
	Build_INTERNAL_ERROR Build_Status = 5
	// Build or step took longer than was allowed.
	Build_TIMEOUT Build_Status = 6
	// Build or step was canceled by a user.
	Build_CANCELLED Build_Status = 7
)

var Build_Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "QUEUED",
	2: "WORKING",
	3: "SUCCESS",
	4: "FAILURE",
	5: "INTERNAL_ERROR",
	6: "TIMEOUT",
	7: "CANCELLED",
}
var Build_Status_value = map[string]int32{
	"STATUS_UNKNOWN": 0,
	"QUEUED":         1,
	"WORKING":        2,
	"SUCCESS":        3,
	"FAILURE":        4,
	"INTERNAL_ERROR": 5,
	"TIMEOUT":        6,
	"CANCELLED":      7,
}

func (x Build_Status) String() string {
	return proto.EnumName(Build_Status_name, int32(x))
}
func (Build_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

// Specifies the hash algorithm, if any.
type Hash_HashType int32

const (
	// No hash requested.
	Hash_NONE Hash_HashType = 0
	// Use a sha256 hash.
	Hash_SHA256 Hash_HashType = 1
)

var Hash_HashType_name = map[int32]string{
	0: "NONE",
	1: "SHA256",
}
var Hash_HashType_value = map[string]int32{
	"NONE":   0,
	"SHA256": 1,
}

func (x Hash_HashType) String() string {
	return proto.EnumName(Hash_HashType_name, int32(x))
}
func (Hash_HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

// Specifies the manner in which the build should be verified, if at all.
type BuildOptions_VerifyOption int32

const (
	// Not a verifiable build. (default)
	BuildOptions_NOT_VERIFIED BuildOptions_VerifyOption = 0
	// Verified build.
	BuildOptions_VERIFIED BuildOptions_VerifyOption = 1
)

var BuildOptions_VerifyOption_name = map[int32]string{
	0: "NOT_VERIFIED",
	1: "VERIFIED",
}
var BuildOptions_VerifyOption_value = map[string]int32{
	"NOT_VERIFIED": 0,
	"VERIFIED":     1,
}

func (x BuildOptions_VerifyOption) String() string {
	return proto.EnumName(BuildOptions_VerifyOption_name, int32(x))
}
func (BuildOptions_VerifyOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 0}
}

// Supported VM sizes.
type BuildOptions_MachineType int32

const (
	// Standard machine type.
	BuildOptions_UNSPECIFIED BuildOptions_MachineType = 0
	// Highcpu machine with 8 CPUs.
	BuildOptions_N1_HIGHCPU_8 BuildOptions_MachineType = 1
	// Highcpu machine with 32 CPUs.
	BuildOptions_N1_HIGHCPU_32 BuildOptions_MachineType = 2
)

var BuildOptions_MachineType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "N1_HIGHCPU_8",
	2: "N1_HIGHCPU_32",
}
var BuildOptions_MachineType_value = map[string]int32{
	"UNSPECIFIED":   0,
	"N1_HIGHCPU_8":  1,
	"N1_HIGHCPU_32": 2,
}

func (x BuildOptions_MachineType) String() string {
	return proto.EnumName(BuildOptions_MachineType_name, int32(x))
}
func (BuildOptions_MachineType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 1} }

// Specifies the behavior when there is an error in the substitution checks.
type BuildOptions_SubstitutionOption int32

const (
	// Fails the build if error in substitutions checks, like missing
	// a substitution in the template or in the map.
	BuildOptions_MUST_MATCH BuildOptions_SubstitutionOption = 0
	// Do not fail the build if error in substitutions checks.
	BuildOptions_ALLOW_LOOSE BuildOptions_SubstitutionOption = 1
)

var BuildOptions_SubstitutionOption_name = map[int32]string{
	0: "MUST_MATCH",
	1: "ALLOW_LOOSE",
}
var BuildOptions_SubstitutionOption_value = map[string]int32{
	"MUST_MATCH":  0,
	"ALLOW_LOOSE": 1,
}

func (x BuildOptions_SubstitutionOption) String() string {
	return proto.EnumName(BuildOptions_SubstitutionOption_name, int32(x))
}
func (BuildOptions_SubstitutionOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 2}
}

// Specifies the behavior when writing build logs to Google Cloud Storage.
type BuildOptions_LogStreamingOption int32

const (
	// Service may automatically determine build log streaming behavior.
	BuildOptions_STREAM_DEFAULT BuildOptions_LogStreamingOption = 0
	// Build logs should be streamed to Google Cloud Storage.
	BuildOptions_STREAM_ON BuildOptions_LogStreamingOption = 1
	// Build logs should not be streamed to Google Cloud Storage; they will be
	// written when the build is completed.
	BuildOptions_STREAM_OFF BuildOptions_LogStreamingOption = 2
)

var BuildOptions_LogStreamingOption_name = map[int32]string{
	0: "STREAM_DEFAULT",
	1: "STREAM_ON",
	2: "STREAM_OFF",
}
var BuildOptions_LogStreamingOption_value = map[string]int32{
	"STREAM_DEFAULT": 0,
	"STREAM_ON":      1,
	"STREAM_OFF":     2,
}

func (x BuildOptions_LogStreamingOption) String() string {
	return proto.EnumName(BuildOptions_LogStreamingOption_name, int32(x))
}
func (BuildOptions_LogStreamingOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 3}
}

// Specifies a build to retry.
type RetryBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Build ID of the original build.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *RetryBuildRequest) Reset()                    { *m = RetryBuildRequest{} }
func (m *RetryBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*RetryBuildRequest) ProtoMessage()               {}
func (*RetryBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RetryBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RetryBuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specifies a build trigger to run and the source to use.
type RunBuildTriggerRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the trigger.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId" json:"trigger_id,omitempty"`
	// Source to build against this trigger.
	Source *RepoSource `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (m *RunBuildTriggerRequest) Reset()                    { *m = RunBuildTriggerRequest{} }
func (m *RunBuildTriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*RunBuildTriggerRequest) ProtoMessage()               {}
func (*RunBuildTriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RunBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

func (m *RunBuildTriggerRequest) GetSource() *RepoSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing the source (see
	// [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	// Google Cloud Storage object containing the source.
	//
	// This object must be a gzipped archive file (`.tar.gz`) containing source to
	// build.
	Object string `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	// Google Cloud Storage generation for the object. If the generation is
	// omitted, the latest generation will be used.
	Generation int64 `protobuf:"varint,3,opt,name=generation" json:"generation,omitempty"`
}

func (m *StorageSource) Reset()                    { *m = StorageSource{} }
func (m *StorageSource) String() string            { return proto.CompactTextString(m) }
func (*StorageSource) ProtoMessage()               {}
func (*StorageSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StorageSource) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *StorageSource) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *StorageSource) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

// Location of the source in a Google Cloud Source Repository.
type RepoSource struct {
	// ID of the project that owns the Cloud Source Repository. If omitted, the
	// project ID requesting the build is assumed.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Name of the Cloud Source Repository. If omitted, the name "default" is
	// assumed.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName" json:"repo_name,omitempty"`
	// A revision within the Cloud Source Repository must be specified in
	// one of these ways.
	//
	// Types that are valid to be assigned to Revision:
	//	*RepoSource_BranchName
	//	*RepoSource_TagName
	//	*RepoSource_CommitSha
	Revision isRepoSource_Revision `protobuf_oneof:"revision"`
	// Directory, relative to the source root, in which to run the build.
	//
	// This must be a relative path. If a step's `dir` is specified and is an
	// absolute path, this value is ignored for that step's execution.
	Dir string `protobuf:"bytes,7,opt,name=dir" json:"dir,omitempty"`
}

func (m *RepoSource) Reset()                    { *m = RepoSource{} }
func (m *RepoSource) String() string            { return proto.CompactTextString(m) }
func (*RepoSource) ProtoMessage()               {}
func (*RepoSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isRepoSource_Revision interface {
	isRepoSource_Revision()
}

type RepoSource_BranchName struct {
	BranchName string `protobuf:"bytes,3,opt,name=branch_name,json=branchName,oneof"`
}
type RepoSource_TagName struct {
	TagName string `protobuf:"bytes,4,opt,name=tag_name,json=tagName,oneof"`
}
type RepoSource_CommitSha struct {
	CommitSha string `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,oneof"`
}

func (*RepoSource_BranchName) isRepoSource_Revision() {}
func (*RepoSource_TagName) isRepoSource_Revision()    {}
func (*RepoSource_CommitSha) isRepoSource_Revision()  {}

func (m *RepoSource) GetRevision() isRepoSource_Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *RepoSource) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RepoSource) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *RepoSource) GetBranchName() string {
	if x, ok := m.GetRevision().(*RepoSource_BranchName); ok {
		return x.BranchName
	}
	return ""
}

func (m *RepoSource) GetTagName() string {
	if x, ok := m.GetRevision().(*RepoSource_TagName); ok {
		return x.TagName
	}
	return ""
}

func (m *RepoSource) GetCommitSha() string {
	if x, ok := m.GetRevision().(*RepoSource_CommitSha); ok {
		return x.CommitSha
	}
	return ""
}

func (m *RepoSource) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RepoSource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RepoSource_OneofMarshaler, _RepoSource_OneofUnmarshaler, _RepoSource_OneofSizer, []interface{}{
		(*RepoSource_BranchName)(nil),
		(*RepoSource_TagName)(nil),
		(*RepoSource_CommitSha)(nil),
	}
}

func _RepoSource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RepoSource)
	// revision
	switch x := m.Revision.(type) {
	case *RepoSource_BranchName:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.BranchName)
	case *RepoSource_TagName:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TagName)
	case *RepoSource_CommitSha:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CommitSha)
	case nil:
	default:
		return fmt.Errorf("RepoSource.Revision has unexpected type %T", x)
	}
	return nil
}

func _RepoSource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RepoSource)
	switch tag {
	case 3: // revision.branch_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_BranchName{x}
		return true, err
	case 4: // revision.tag_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_TagName{x}
		return true, err
	case 5: // revision.commit_sha
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Revision = &RepoSource_CommitSha{x}
		return true, err
	default:
		return false, nil
	}
}

func _RepoSource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RepoSource)
	// revision
	switch x := m.Revision.(type) {
	case *RepoSource_BranchName:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BranchName)))
		n += len(x.BranchName)
	case *RepoSource_TagName:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TagName)))
		n += len(x.TagName)
	case *RepoSource_CommitSha:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CommitSha)))
		n += len(x.CommitSha)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Location of the source in a supported storage service.
type Source struct {
	// Location of source.
	//
	// Types that are valid to be assigned to Source:
	//	*Source_StorageSource
	//	*Source_RepoSource
	Source isSource_Source `protobuf_oneof:"source"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isSource_Source interface {
	isSource_Source()
}

type Source_StorageSource struct {
	StorageSource *StorageSource `protobuf:"bytes,2,opt,name=storage_source,json=storageSource,oneof"`
}
type Source_RepoSource struct {
	RepoSource *RepoSource `protobuf:"bytes,3,opt,name=repo_source,json=repoSource,oneof"`
}

func (*Source_StorageSource) isSource_Source() {}
func (*Source_RepoSource) isSource_Source()    {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetStorageSource() *StorageSource {
	if x, ok := m.GetSource().(*Source_StorageSource); ok {
		return x.StorageSource
	}
	return nil
}

func (m *Source) GetRepoSource() *RepoSource {
	if x, ok := m.GetSource().(*Source_RepoSource); ok {
		return x.RepoSource
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_StorageSource)(nil),
		(*Source_RepoSource)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_StorageSource:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageSource); err != nil {
			return err
		}
	case *Source_RepoSource:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RepoSource); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Source has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 2: // source.storage_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_StorageSource{msg}
		return true, err
	case 3: // source.repo_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RepoSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_RepoSource{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_StorageSource:
		s := proto.Size(x.StorageSource)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Source_RepoSource:
		s := proto.Size(x.RepoSource)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// An image built by the pipeline.
type BuiltImage struct {
	// Name used to push the container image to Google Container Registry, as
	// presented to `docker push`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Docker Registry 2.0 digest.
	Digest string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
	// Stores timing information for pushing the specified image.
	// @OutputOnly
	PushTiming *TimeSpan `protobuf:"bytes,4,opt,name=push_timing,json=pushTiming" json:"push_timing,omitempty"`
}

func (m *BuiltImage) Reset()                    { *m = BuiltImage{} }
func (m *BuiltImage) String() string            { return proto.CompactTextString(m) }
func (*BuiltImage) ProtoMessage()               {}
func (*BuiltImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BuiltImage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuiltImage) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *BuiltImage) GetPushTiming() *TimeSpan {
	if m != nil {
		return m.PushTiming
	}
	return nil
}

// A step in the build pipeline.
type BuildStep struct {
	// Required. The name of the container image that will run this particular
	// build step.
	//
	// If the image is available in the host's Docker daemon's cache, it
	// will be run directly. If not, the host will attempt to pull the image
	// first, using the builder service account's credentials if necessary.
	//
	// The Docker daemon's cache will already have the latest versions of all of
	// the officially supported build steps
	// ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
	// The Docker daemon will also have cached many of the layers for some popular
	// images, like "ubuntu", "debian", but they will be refreshed at the time you
	// attempt to use them.
	//
	// If you built an image in a previous build step, it will be stored in the
	// host's Docker daemon's cache and is available to use as the name for a
	// later build step.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A list of environment variable definitions to be used when running a step.
	//
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY"
	// being given the value "VALUE".
	Env []string `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	// A list of arguments that will be presented to the step when it is started.
	//
	// If the image used to run the step's container has an entrypoint, the `args`
	// are used as arguments to that entrypoint. If the image does not define
	// an entrypoint, the first element in args is used as the entrypoint,
	// and the remainder will be used as arguments.
	Args []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Working directory to use when running this step's container.
	//
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a `volume` for that path is specified.
	//
	// If the build specifies a `RepoSource` with `dir` and a step with a `dir`,
	// which specifies an absolute path, the `RepoSource` `dir` is ignored for
	// the step's execution.
	Dir string `protobuf:"bytes,4,opt,name=dir" json:"dir,omitempty"`
	// Unique identifier for this build step, used in `wait_for` to
	// reference this build step as a dependency.
	Id string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in `wait_for`
	// have completed successfully. If `wait_for` is empty, this build step will
	// start when all previous build steps in the `Build.Steps` list have
	// completed successfully.
	WaitFor []string `protobuf:"bytes,6,rep,name=wait_for,json=waitFor" json:"wait_for,omitempty"`
	// Entrypoint to be used instead of the build step image's default entrypoint.
	// If unset, the image's default entrypoint is used.
	Entrypoint string `protobuf:"bytes,7,opt,name=entrypoint" json:"entrypoint,omitempty"`
	// A list of environment variables which are encrypted using a Cloud Key
	// Management Service crypto key. These values must be specified in the
	// build's `Secret`.
	SecretEnv []string `protobuf:"bytes,8,rep,name=secret_env,json=secretEnv" json:"secret_env,omitempty"`
	// List of volumes to mount into the build step.
	//
	// Each volume will be created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents will
	// be discarded.
	//
	// Using a named volume in only one step is not valid as it is indicative
	// of a mis-configured build request.
	Volumes []*Volume `protobuf:"bytes,9,rep,name=volumes" json:"volumes,omitempty"`
	// Stores timing information for executing this build step.
	// @OutputOnly
	Timing *TimeSpan `protobuf:"bytes,10,opt,name=timing" json:"timing,omitempty"`
	// Time limit for executing this build step. If not defined, the step has no
	// time limit and will be allowed to continue to run until either it completes
	// or the build itself times out.
	Timeout *google_protobuf4.Duration `protobuf:"bytes,11,opt,name=timeout" json:"timeout,omitempty"`
	// Status of the build step. At this time, build step status is only updated
	// on build completion; step status is not updated in real-time as the build
	// progresses.
	// @OutputOnly
	Status Build_Status `protobuf:"varint,12,opt,name=status,enum=google.devtools.cloudbuild.v1.Build_Status" json:"status,omitempty"`
}

func (m *BuildStep) Reset()                    { *m = BuildStep{} }
func (m *BuildStep) String() string            { return proto.CompactTextString(m) }
func (*BuildStep) ProtoMessage()               {}
func (*BuildStep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BuildStep) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildStep) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *BuildStep) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *BuildStep) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *BuildStep) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildStep) GetWaitFor() []string {
	if m != nil {
		return m.WaitFor
	}
	return nil
}

func (m *BuildStep) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *BuildStep) GetSecretEnv() []string {
	if m != nil {
		return m.SecretEnv
	}
	return nil
}

func (m *BuildStep) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *BuildStep) GetTiming() *TimeSpan {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *BuildStep) GetTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *BuildStep) GetStatus() Build_Status {
	if m != nil {
		return m.Status
	}
	return Build_STATUS_UNKNOWN
}

// Volume describes a Docker container volume which is mounted into build steps
// in order to persist files across build step execution.
type Volume struct {
	// Name of the volume to mount.
	//
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Path at which to mount the volume.
	//
	// Paths must be absolute and cannot conflict with other volume paths on the
	// same build step or with certain reserved volume paths.
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Artifacts created by the build pipeline.
type Results struct {
	// Container images that were built as a part of the build.
	Images []*BuiltImage `protobuf:"bytes,2,rep,name=images" json:"images,omitempty"`
	// List of build step digests, in the order corresponding to build step
	// indices.
	BuildStepImages []string `protobuf:"bytes,3,rep,name=build_step_images,json=buildStepImages" json:"build_step_images,omitempty"`
	// Path to the artifact manifest. Only populated when artifacts are uploaded.
	ArtifactManifest string `protobuf:"bytes,4,opt,name=artifact_manifest,json=artifactManifest" json:"artifact_manifest,omitempty"`
	// Number of artifacts uploaded. Only populated when artifacts are uploaded.
	NumArtifacts int64 `protobuf:"varint,5,opt,name=num_artifacts,json=numArtifacts" json:"num_artifacts,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Results) GetImages() []*BuiltImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Results) GetBuildStepImages() []string {
	if m != nil {
		return m.BuildStepImages
	}
	return nil
}

func (m *Results) GetArtifactManifest() string {
	if m != nil {
		return m.ArtifactManifest
	}
	return ""
}

func (m *Results) GetNumArtifacts() int64 {
	if m != nil {
		return m.NumArtifacts
	}
	return 0
}

// A build resource in the Container Builder API.
//
// At a high level, a `Build` describes where to find source code, how to build
// it (for example, the builder image to run on the source), and where to store
// the built artifacts.
//
// Fields can include the following variables, which will be expanded when the
// build is created:
//
// - $PROJECT_ID: the project ID of the build.
// - $BUILD_ID: the autogenerated ID of the build.
// - $REPO_NAME: the source repository name specified by RepoSource.
// - $BRANCH_NAME: the branch name specified by RepoSource.
// - $TAG_NAME: the tag name specified by RepoSource.
// - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or
//   resolved from the specified branch or tag.
// - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type Build struct {
	// Unique identifier of the build.
	// @OutputOnly
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// ID of the project.
	// @OutputOnly.
	ProjectId string `protobuf:"bytes,16,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Status of the build.
	// @OutputOnly
	Status Build_Status `protobuf:"varint,2,opt,name=status,enum=google.devtools.cloudbuild.v1.Build_Status" json:"status,omitempty"`
	// Customer-readable message about the current status.
	// @OutputOnly
	StatusDetail string `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail" json:"status_detail,omitempty"`
	// The location of the source files to build.
	Source *Source `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Required. The operations to be performed on the workspace.
	Steps []*BuildStep `protobuf:"bytes,11,rep,name=steps" json:"steps,omitempty"`
	// Results of the build.
	// @OutputOnly
	Results *Results `protobuf:"bytes,10,opt,name=results" json:"results,omitempty"`
	// Time at which the request to create the build was received.
	// @OutputOnly
	CreateTime *google_protobuf5.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Time at which execution of the build was started.
	// @OutputOnly
	StartTime *google_protobuf5.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Time at which execution of the build was finished.
	//
	// The difference between finish_time and start_time is the duration of the
	// build's execution.
	// @OutputOnly
	FinishTime *google_protobuf5.Timestamp `protobuf:"bytes,8,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	// Amount of time that this build should be allowed to run, to second
	// granularity. If this amount of time elapses, work on the build will cease
	// and the build status will be `TIMEOUT`.
	//
	// Default time is ten minutes.
	Timeout *google_protobuf4.Duration `protobuf:"bytes,12,opt,name=timeout" json:"timeout,omitempty"`
	// A list of images to be pushed upon the successful completion of all build
	// steps.
	//
	// The images are pushed using the builder service account's credentials.
	//
	// The digests of the pushed images will be stored in the `Build` resource's
	// results field.
	//
	// If any of the images fail to be pushed, the build status is marked
	// `FAILURE`.
	Images []string `protobuf:"bytes,13,rep,name=images" json:"images,omitempty"`
	// Artifacts produced by the build that should be uploaded upon
	// successful completion of all build steps.
	Artifacts *Artifacts `protobuf:"bytes,37,opt,name=artifacts" json:"artifacts,omitempty"`
	// Google Cloud Storage bucket where logs should be written (see
	// [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	// Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket string `protobuf:"bytes,19,opt,name=logs_bucket,json=logsBucket" json:"logs_bucket,omitempty"`
	// A permanent fixed identifier for source.
	// @OutputOnly
	SourceProvenance *SourceProvenance `protobuf:"bytes,21,opt,name=source_provenance,json=sourceProvenance" json:"source_provenance,omitempty"`
	// The ID of the `BuildTrigger` that triggered this build, if it was
	// triggered automatically.
	// @OutputOnly
	BuildTriggerId string `protobuf:"bytes,22,opt,name=build_trigger_id,json=buildTriggerId" json:"build_trigger_id,omitempty"`
	// Special options for this build.
	Options *BuildOptions `protobuf:"bytes,23,opt,name=options" json:"options,omitempty"`
	// URL to logs for this build in Google Cloud Console.
	// @OutputOnly
	LogUrl string `protobuf:"bytes,25,opt,name=log_url,json=logUrl" json:"log_url,omitempty"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `protobuf:"bytes,29,rep,name=substitutions" json:"substitutions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `protobuf:"bytes,31,rep,name=tags" json:"tags,omitempty"`
	// Secrets to decrypt using Cloud Key Management Service.
	Secrets []*Secret `protobuf:"bytes,32,rep,name=secrets" json:"secrets,omitempty"`
	// Stores timing information for phases of the build. Valid keys are:
	//
	// * BUILD: time to execute all build steps
	// * PUSH: time to push all specified images.
	// * FETCHSOURCE: time to fetch source.
	//
	// If the build does not specify source or images,
	// these keys will not be included.
	// @OutputOnly
	Timing map[string]*TimeSpan `protobuf:"bytes,33,rep,name=timing" json:"timing,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Build) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Build) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Build) GetStatus() Build_Status {
	if m != nil {
		return m.Status
	}
	return Build_STATUS_UNKNOWN
}

func (m *Build) GetStatusDetail() string {
	if m != nil {
		return m.StatusDetail
	}
	return ""
}

func (m *Build) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Build) GetSteps() []*BuildStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Build) GetResults() *Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Build) GetCreateTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Build) GetStartTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Build) GetFinishTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

func (m *Build) GetTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Build) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Build) GetArtifacts() *Artifacts {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *Build) GetLogsBucket() string {
	if m != nil {
		return m.LogsBucket
	}
	return ""
}

func (m *Build) GetSourceProvenance() *SourceProvenance {
	if m != nil {
		return m.SourceProvenance
	}
	return nil
}

func (m *Build) GetBuildTriggerId() string {
	if m != nil {
		return m.BuildTriggerId
	}
	return ""
}

func (m *Build) GetOptions() *BuildOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Build) GetLogUrl() string {
	if m != nil {
		return m.LogUrl
	}
	return ""
}

func (m *Build) GetSubstitutions() map[string]string {
	if m != nil {
		return m.Substitutions
	}
	return nil
}

func (m *Build) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Build) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *Build) GetTiming() map[string]*TimeSpan {
	if m != nil {
		return m.Timing
	}
	return nil
}

// Artifacts produced by a build that should be uploaded upon
// successful completion of all build steps.
type Artifacts struct {
	// A list of images to be pushed upon the successful completion of all build
	// steps.
	//
	// The images will be pushed using the builder service account's credentials.
	//
	// The digests of the pushed images will be stored in the Build resource's
	// results field.
	//
	// If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
	// A list of objects to be uploaded to Cloud Storage upon successful
	// completion of all build steps.
	//
	// Files in the workspace matching specified paths globs will be uploaded to
	// the specified Cloud Storage location using the builder service account's
	// credentials.
	//
	// The location and generation of the uploaded objects will be stored in the
	// Build resource's results field.
	//
	// If any objects fail to be pushed, the build is marked FAILURE.
	Objects *Artifacts_ArtifactObjects `protobuf:"bytes,2,opt,name=objects" json:"objects,omitempty"`
}

func (m *Artifacts) Reset()                    { *m = Artifacts{} }
func (m *Artifacts) String() string            { return proto.CompactTextString(m) }
func (*Artifacts) ProtoMessage()               {}
func (*Artifacts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Artifacts) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Artifacts) GetObjects() *Artifacts_ArtifactObjects {
	if m != nil {
		return m.Objects
	}
	return nil
}

// Files in the workspace to upload to Cloud Storage upon successful
// completion of all build steps.
type Artifacts_ArtifactObjects struct {
	// Cloud Storage bucket and optional object path, in the form
	// "gs://bucket/path/to/somewhere/". (see [Bucket Name
	// Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	//
	// Files in the workspace matching any path pattern will be uploaded to
	// Cloud Storage with this location as a prefix.
	Location string `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// Path globs used to match files in the build's workspace.
	Paths []string `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
}

func (m *Artifacts_ArtifactObjects) Reset()                    { *m = Artifacts_ArtifactObjects{} }
func (m *Artifacts_ArtifactObjects) String() string            { return proto.CompactTextString(m) }
func (*Artifacts_ArtifactObjects) ProtoMessage()               {}
func (*Artifacts_ArtifactObjects) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *Artifacts_ArtifactObjects) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Artifacts_ArtifactObjects) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

// Start and end times for a build execution phase.
type TimeSpan struct {
	// Start of time span.
	StartTime *google_protobuf5.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End of time span.
	EndTime *google_protobuf5.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *TimeSpan) Reset()                    { *m = TimeSpan{} }
func (m *TimeSpan) String() string            { return proto.CompactTextString(m) }
func (*TimeSpan) ProtoMessage()               {}
func (*TimeSpan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TimeSpan) GetStartTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeSpan) GetEndTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// Metadata for build operations.
type BuildOperationMetadata struct {
	// The build that the operation is tracking.
	Build *Build `protobuf:"bytes,1,opt,name=build" json:"build,omitempty"`
}

func (m *BuildOperationMetadata) Reset()                    { *m = BuildOperationMetadata{} }
func (m *BuildOperationMetadata) String() string            { return proto.CompactTextString(m) }
func (*BuildOperationMetadata) ProtoMessage()               {}
func (*BuildOperationMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BuildOperationMetadata) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

// Provenance of the source. Ways to find the original source, or verify that
// some source was used for this build.
type SourceProvenance struct {
	// A copy of the build's `source.storage_source`, if exists, with any
	// generations resolved.
	ResolvedStorageSource *StorageSource `protobuf:"bytes,3,opt,name=resolved_storage_source,json=resolvedStorageSource" json:"resolved_storage_source,omitempty"`
	// A copy of the build's `source.repo_source`, if exists, with any
	// revisions resolved.
	ResolvedRepoSource *RepoSource `protobuf:"bytes,6,opt,name=resolved_repo_source,json=resolvedRepoSource" json:"resolved_repo_source,omitempty"`
	// Hash(es) of the build source, which can be used to verify that the original
	// source integrity was maintained in the build. Note that `FileHashes` will
	// only be populated if `BuildOptions` has requested a `SourceProvenanceHash`.
	//
	// The keys to this map are file paths used as build source and the values
	// contain the hash values for those files.
	//
	// If the build source came in a single package such as a gzipped tarfile
	// (`.tar.gz`), the `FileHash` will be for the single path to that file.
	// @OutputOnly
	FileHashes map[string]*FileHashes `protobuf:"bytes,4,rep,name=file_hashes,json=fileHashes" json:"file_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SourceProvenance) Reset()                    { *m = SourceProvenance{} }
func (m *SourceProvenance) String() string            { return proto.CompactTextString(m) }
func (*SourceProvenance) ProtoMessage()               {}
func (*SourceProvenance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SourceProvenance) GetResolvedStorageSource() *StorageSource {
	if m != nil {
		return m.ResolvedStorageSource
	}
	return nil
}

func (m *SourceProvenance) GetResolvedRepoSource() *RepoSource {
	if m != nil {
		return m.ResolvedRepoSource
	}
	return nil
}

func (m *SourceProvenance) GetFileHashes() map[string]*FileHashes {
	if m != nil {
		return m.FileHashes
	}
	return nil
}

// Container message for hashes of byte content of files, used in
// SourceProvenance messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash []*Hash `protobuf:"bytes,1,rep,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
}

func (m *FileHashes) Reset()                    { *m = FileHashes{} }
func (m *FileHashes) String() string            { return proto.CompactTextString(m) }
func (*FileHashes) ProtoMessage()               {}
func (*FileHashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FileHashes) GetFileHash() []*Hash {
	if m != nil {
		return m.FileHash
	}
	return nil
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type Hash_HashType `protobuf:"varint,1,opt,name=type,enum=google.devtools.cloudbuild.v1.Hash_HashType" json:"type,omitempty"`
	// The hash value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Hash) GetType() Hash_HashType {
	if m != nil {
		return m.Type
	}
	return Hash_NONE
}

func (m *Hash) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Pairs a set of secret environment variables containing encrypted
// values with the Cloud KMS key to use to decrypt the value.
type Secret struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName string `protobuf:"bytes,1,opt,name=kms_key_name,json=kmsKeyName" json:"kms_key_name,omitempty"`
	// Map of environment variable name to its encrypted value.
	//
	// Secret environment variables must be unique across all of a build's
	// secrets, and must be used by at least one build step. Values can be at most
	// 1 KB in size. There can be at most ten secret values across all of a
	// build's secrets.
	SecretEnv map[string][]byte `protobuf:"bytes,3,rep,name=secret_env,json=secretEnv" json:"secret_env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Secret) GetKmsKeyName() string {
	if m != nil {
		return m.KmsKeyName
	}
	return ""
}

func (m *Secret) GetSecretEnv() map[string][]byte {
	if m != nil {
		return m.SecretEnv
	}
	return nil
}

// Request to create a new build.
type CreateBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Build resource to create.
	Build *Build `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
}

func (m *CreateBuildRequest) Reset()                    { *m = CreateBuildRequest{} }
func (m *CreateBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildRequest) ProtoMessage()               {}
func (*CreateBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateBuildRequest) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

// Request to get a build.
type GetBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the build.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetBuildRequest) Reset()                    { *m = GetBuildRequest{} }
func (m *GetBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildRequest) ProtoMessage()               {}
func (*GetBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetBuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Request to list builds.
type ListBuildsRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Number of results to return in the list.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// The raw filter text to constrain the results.
	Filter string `protobuf:"bytes,8,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListBuildsRequest) Reset()                    { *m = ListBuildsRequest{} }
func (m *ListBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsRequest) ProtoMessage()               {}
func (*ListBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListBuildsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ListBuildsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListBuildsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListBuildsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// Response including listed builds.
type ListBuildsResponse struct {
	// Builds will be sorted by `create_time`, descending.
	Builds []*Build `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty"`
	// Token to receive the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListBuildsResponse) Reset()                    { *m = ListBuildsResponse{} }
func (m *ListBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsResponse) ProtoMessage()               {}
func (*ListBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ListBuildsResponse) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

func (m *ListBuildsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to cancel an ongoing build.
type CancelBuildRequest struct {
	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the build.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *CancelBuildRequest) Reset()                    { *m = CancelBuildRequest{} }
func (m *CancelBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelBuildRequest) ProtoMessage()               {}
func (*CancelBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CancelBuildRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CancelBuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Configuration for an automated build in response to source repository
// changes.
type BuildTrigger struct {
	// Unique identifier of the trigger.
	//
	// @OutputOnly
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Human-readable description of this trigger.
	Description string `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	// Template describing the types of source changes to trigger a build.
	//
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular expression
	// will trigger a build.
	TriggerTemplate *RepoSource `protobuf:"bytes,7,opt,name=trigger_template,json=triggerTemplate" json:"trigger_template,omitempty"`
	// Template describing the Build request to make when the trigger is matched.
	//
	// Types that are valid to be assigned to BuildTemplate:
	//	*BuildTrigger_Build
	//	*BuildTrigger_Filename
	BuildTemplate isBuildTrigger_BuildTemplate `protobuf_oneof:"build_template"`
	// Time when the trigger was created.
	//
	// @OutputOnly
	CreateTime *google_protobuf5.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// If true, the trigger will never result in a build.
	Disabled bool `protobuf:"varint,9,opt,name=disabled" json:"disabled,omitempty"`
	// Substitutions data for Build resource.
	Substitutions map[string]string `protobuf:"bytes,11,rep,name=substitutions" json:"substitutions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BuildTrigger) Reset()                    { *m = BuildTrigger{} }
func (m *BuildTrigger) String() string            { return proto.CompactTextString(m) }
func (*BuildTrigger) ProtoMessage()               {}
func (*BuildTrigger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type isBuildTrigger_BuildTemplate interface {
	isBuildTrigger_BuildTemplate()
}

type BuildTrigger_Build struct {
	Build *Build `protobuf:"bytes,4,opt,name=build,oneof"`
}
type BuildTrigger_Filename struct {
	Filename string `protobuf:"bytes,8,opt,name=filename,oneof"`
}

func (*BuildTrigger_Build) isBuildTrigger_BuildTemplate()    {}
func (*BuildTrigger_Filename) isBuildTrigger_BuildTemplate() {}

func (m *BuildTrigger) GetBuildTemplate() isBuildTrigger_BuildTemplate {
	if m != nil {
		return m.BuildTemplate
	}
	return nil
}

func (m *BuildTrigger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildTrigger) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BuildTrigger) GetTriggerTemplate() *RepoSource {
	if m != nil {
		return m.TriggerTemplate
	}
	return nil
}

func (m *BuildTrigger) GetBuild() *Build {
	if x, ok := m.GetBuildTemplate().(*BuildTrigger_Build); ok {
		return x.Build
	}
	return nil
}

func (m *BuildTrigger) GetFilename() string {
	if x, ok := m.GetBuildTemplate().(*BuildTrigger_Filename); ok {
		return x.Filename
	}
	return ""
}

func (m *BuildTrigger) GetCreateTime() *google_protobuf5.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *BuildTrigger) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *BuildTrigger) GetSubstitutions() map[string]string {
	if m != nil {
		return m.Substitutions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BuildTrigger) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BuildTrigger_OneofMarshaler, _BuildTrigger_OneofUnmarshaler, _BuildTrigger_OneofSizer, []interface{}{
		(*BuildTrigger_Build)(nil),
		(*BuildTrigger_Filename)(nil),
	}
}

func _BuildTrigger_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BuildTrigger)
	// build_template
	switch x := m.BuildTemplate.(type) {
	case *BuildTrigger_Build:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Build); err != nil {
			return err
		}
	case *BuildTrigger_Filename:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Filename)
	case nil:
	default:
		return fmt.Errorf("BuildTrigger.BuildTemplate has unexpected type %T", x)
	}
	return nil
}

func _BuildTrigger_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BuildTrigger)
	switch tag {
	case 4: // build_template.build
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Build)
		err := b.DecodeMessage(msg)
		m.BuildTemplate = &BuildTrigger_Build{msg}
		return true, err
	case 8: // build_template.filename
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.BuildTemplate = &BuildTrigger_Filename{x}
		return true, err
	default:
		return false, nil
	}
}

func _BuildTrigger_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BuildTrigger)
	// build_template
	switch x := m.BuildTemplate.(type) {
	case *BuildTrigger_Build:
		s := proto.Size(x.Build)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BuildTrigger_Filename:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Filename)))
		n += len(x.Filename)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Request to create a new `BuildTrigger`.
type CreateBuildTriggerRequest struct {
	// ID of the project for which to configure automatic builds.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// `BuildTrigger` to create.
	Trigger *BuildTrigger `protobuf:"bytes,2,opt,name=trigger" json:"trigger,omitempty"`
}

func (m *CreateBuildTriggerRequest) Reset()                    { *m = CreateBuildTriggerRequest{} }
func (m *CreateBuildTriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildTriggerRequest) ProtoMessage()               {}
func (*CreateBuildTriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateBuildTriggerRequest) GetTrigger() *BuildTrigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

// Returns the `BuildTrigger` with the specified ID.
type GetBuildTriggerRequest struct {
	// ID of the project that owns the trigger.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the `BuildTrigger` to get.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId" json:"trigger_id,omitempty"`
}

func (m *GetBuildTriggerRequest) Reset()                    { *m = GetBuildTriggerRequest{} }
func (m *GetBuildTriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildTriggerRequest) ProtoMessage()               {}
func (*GetBuildTriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

// Request to list existing `BuildTriggers`.
type ListBuildTriggersRequest struct {
	// ID of the project for which to list BuildTriggers.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *ListBuildTriggersRequest) Reset()                    { *m = ListBuildTriggersRequest{} }
func (m *ListBuildTriggersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBuildTriggersRequest) ProtoMessage()               {}
func (*ListBuildTriggersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ListBuildTriggersRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

// Response containing existing `BuildTriggers`.
type ListBuildTriggersResponse struct {
	// `BuildTriggers` for the project, sorted by `create_time` descending.
	Triggers []*BuildTrigger `protobuf:"bytes,1,rep,name=triggers" json:"triggers,omitempty"`
}

func (m *ListBuildTriggersResponse) Reset()                    { *m = ListBuildTriggersResponse{} }
func (m *ListBuildTriggersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBuildTriggersResponse) ProtoMessage()               {}
func (*ListBuildTriggersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ListBuildTriggersResponse) GetTriggers() []*BuildTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// Request to delete a `BuildTrigger`.
type DeleteBuildTriggerRequest struct {
	// ID of the project that owns the trigger.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the `BuildTrigger` to delete.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId" json:"trigger_id,omitempty"`
}

func (m *DeleteBuildTriggerRequest) Reset()                    { *m = DeleteBuildTriggerRequest{} }
func (m *DeleteBuildTriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBuildTriggerRequest) ProtoMessage()               {}
func (*DeleteBuildTriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DeleteBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *DeleteBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

// Request to update an existing `BuildTrigger`.
type UpdateBuildTriggerRequest struct {
	// ID of the project that owns the trigger.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the `BuildTrigger` to update.
	TriggerId string `protobuf:"bytes,2,opt,name=trigger_id,json=triggerId" json:"trigger_id,omitempty"`
	// `BuildTrigger` to update.
	Trigger *BuildTrigger `protobuf:"bytes,3,opt,name=trigger" json:"trigger,omitempty"`
}

func (m *UpdateBuildTriggerRequest) Reset()                    { *m = UpdateBuildTriggerRequest{} }
func (m *UpdateBuildTriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateBuildTriggerRequest) ProtoMessage()               {}
func (*UpdateBuildTriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateBuildTriggerRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UpdateBuildTriggerRequest) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

func (m *UpdateBuildTriggerRequest) GetTrigger() *BuildTrigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

// Optional arguments to enable specific features of builds.
type BuildOptions struct {
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []Hash_HashType `protobuf:"varint,1,rep,packed,name=source_provenance_hash,json=sourceProvenanceHash,enum=google.devtools.cloudbuild.v1.Hash_HashType" json:"source_provenance_hash,omitempty"`
	// Requested verifiability options.
	RequestedVerifyOption BuildOptions_VerifyOption `protobuf:"varint,2,opt,name=requested_verify_option,json=requestedVerifyOption,enum=google.devtools.cloudbuild.v1.BuildOptions_VerifyOption" json:"requested_verify_option,omitempty"`
	// Compute Engine machine type on which to run the build.
	MachineType BuildOptions_MachineType `protobuf:"varint,3,opt,name=machine_type,json=machineType,enum=google.devtools.cloudbuild.v1.BuildOptions_MachineType" json:"machine_type,omitempty"`
	// Requested disk size for the VM that runs the build. Note that this is *NOT*
	// "disk free"; some of the space will be used by the operating system and
	// build utilities. Also note that this is the minimum disk size that will be
	// allocated for the build -- the build may run with a larger disk than
	// requested. At present, the maximum disk size is 1000GB; builds that request
	// more than the maximum are rejected with an error.
	DiskSizeGb int64 `protobuf:"varint,6,opt,name=disk_size_gb,json=diskSizeGb" json:"disk_size_gb,omitempty"`
	// Option to specify behavior when there is an error in the substitution
	// checks.
	SubstitutionOption BuildOptions_SubstitutionOption `protobuf:"varint,4,opt,name=substitution_option,json=substitutionOption,enum=google.devtools.cloudbuild.v1.BuildOptions_SubstitutionOption" json:"substitution_option,omitempty"`
	// Option to define build log streaming behavior to Google Cloud
	// Storage.
	LogStreamingOption BuildOptions_LogStreamingOption `protobuf:"varint,5,opt,name=log_streaming_option,json=logStreamingOption,enum=google.devtools.cloudbuild.v1.BuildOptions_LogStreamingOption" json:"log_streaming_option,omitempty"`
}

func (m *BuildOptions) Reset()                    { *m = BuildOptions{} }
func (m *BuildOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()               {}
func (*BuildOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BuildOptions) GetSourceProvenanceHash() []Hash_HashType {
	if m != nil {
		return m.SourceProvenanceHash
	}
	return nil
}

func (m *BuildOptions) GetRequestedVerifyOption() BuildOptions_VerifyOption {
	if m != nil {
		return m.RequestedVerifyOption
	}
	return BuildOptions_NOT_VERIFIED
}

func (m *BuildOptions) GetMachineType() BuildOptions_MachineType {
	if m != nil {
		return m.MachineType
	}
	return BuildOptions_UNSPECIFIED
}

func (m *BuildOptions) GetDiskSizeGb() int64 {
	if m != nil {
		return m.DiskSizeGb
	}
	return 0
}

func (m *BuildOptions) GetSubstitutionOption() BuildOptions_SubstitutionOption {
	if m != nil {
		return m.SubstitutionOption
	}
	return BuildOptions_MUST_MATCH
}

func (m *BuildOptions) GetLogStreamingOption() BuildOptions_LogStreamingOption {
	if m != nil {
		return m.LogStreamingOption
	}
	return BuildOptions_STREAM_DEFAULT
}

func init() {
	proto.RegisterType((*RetryBuildRequest)(nil), "google.devtools.cloudbuild.v1.RetryBuildRequest")
	proto.RegisterType((*RunBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.RunBuildTriggerRequest")
	proto.RegisterType((*StorageSource)(nil), "google.devtools.cloudbuild.v1.StorageSource")
	proto.RegisterType((*RepoSource)(nil), "google.devtools.cloudbuild.v1.RepoSource")
	proto.RegisterType((*Source)(nil), "google.devtools.cloudbuild.v1.Source")
	proto.RegisterType((*BuiltImage)(nil), "google.devtools.cloudbuild.v1.BuiltImage")
	proto.RegisterType((*BuildStep)(nil), "google.devtools.cloudbuild.v1.BuildStep")
	proto.RegisterType((*Volume)(nil), "google.devtools.cloudbuild.v1.Volume")
	proto.RegisterType((*Results)(nil), "google.devtools.cloudbuild.v1.Results")
	proto.RegisterType((*Build)(nil), "google.devtools.cloudbuild.v1.Build")
	proto.RegisterType((*Artifacts)(nil), "google.devtools.cloudbuild.v1.Artifacts")
	proto.RegisterType((*Artifacts_ArtifactObjects)(nil), "google.devtools.cloudbuild.v1.Artifacts.ArtifactObjects")
	proto.RegisterType((*TimeSpan)(nil), "google.devtools.cloudbuild.v1.TimeSpan")
	proto.RegisterType((*BuildOperationMetadata)(nil), "google.devtools.cloudbuild.v1.BuildOperationMetadata")
	proto.RegisterType((*SourceProvenance)(nil), "google.devtools.cloudbuild.v1.SourceProvenance")
	proto.RegisterType((*FileHashes)(nil), "google.devtools.cloudbuild.v1.FileHashes")
	proto.RegisterType((*Hash)(nil), "google.devtools.cloudbuild.v1.Hash")
	proto.RegisterType((*Secret)(nil), "google.devtools.cloudbuild.v1.Secret")
	proto.RegisterType((*CreateBuildRequest)(nil), "google.devtools.cloudbuild.v1.CreateBuildRequest")
	proto.RegisterType((*GetBuildRequest)(nil), "google.devtools.cloudbuild.v1.GetBuildRequest")
	proto.RegisterType((*ListBuildsRequest)(nil), "google.devtools.cloudbuild.v1.ListBuildsRequest")
	proto.RegisterType((*ListBuildsResponse)(nil), "google.devtools.cloudbuild.v1.ListBuildsResponse")
	proto.RegisterType((*CancelBuildRequest)(nil), "google.devtools.cloudbuild.v1.CancelBuildRequest")
	proto.RegisterType((*BuildTrigger)(nil), "google.devtools.cloudbuild.v1.BuildTrigger")
	proto.RegisterType((*CreateBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.CreateBuildTriggerRequest")
	proto.RegisterType((*GetBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.GetBuildTriggerRequest")
	proto.RegisterType((*ListBuildTriggersRequest)(nil), "google.devtools.cloudbuild.v1.ListBuildTriggersRequest")
	proto.RegisterType((*ListBuildTriggersResponse)(nil), "google.devtools.cloudbuild.v1.ListBuildTriggersResponse")
	proto.RegisterType((*DeleteBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.DeleteBuildTriggerRequest")
	proto.RegisterType((*UpdateBuildTriggerRequest)(nil), "google.devtools.cloudbuild.v1.UpdateBuildTriggerRequest")
	proto.RegisterType((*BuildOptions)(nil), "google.devtools.cloudbuild.v1.BuildOptions")
	proto.RegisterEnum("google.devtools.cloudbuild.v1.Build_Status", Build_Status_name, Build_Status_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.Hash_HashType", Hash_HashType_name, Hash_HashType_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_VerifyOption", BuildOptions_VerifyOption_name, BuildOptions_VerifyOption_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_MachineType", BuildOptions_MachineType_name, BuildOptions_MachineType_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_SubstitutionOption", BuildOptions_SubstitutionOption_name, BuildOptions_SubstitutionOption_value)
	proto.RegisterEnum("google.devtools.cloudbuild.v1.BuildOptions_LogStreamingOption", BuildOptions_LogStreamingOption_name, BuildOptions_LogStreamingOption_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudBuild service

type CloudBuildClient interface {
	// Starts a build with the specified configuration.
	//
	// This method returns a long-running `Operation`, which includes the build
	// ID. Pass the build ID to `GetBuild` to determine the build status (such as
	// `SUCCESS` or `FAILURE`).
	CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
	// Returns information about a previously requested build.
	//
	// The `Build` that is returned includes its status (such as `SUCCESS`,
	// `FAILURE`, or `WORKING`), and timing information.
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Lists previously requested builds.
	//
	// Previously requested builds may still be in-progress, or may have finished
	// successfully or unsuccessfully.
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// Cancels a build in progress.
	CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// Creates a new build based on the specified build.
	//
	// This method creates a new build using the original build request, which may
	// or may not result in an identical build.
	//
	// For triggered builds:
	//
	// * Triggered builds resolve to a precise revision; therefore a retry of a
	// triggered build will result in a build that uses the same revision.
	//
	// For non-triggered builds that specify `RepoSource`:
	//
	// * If the original build built from the tip of a branch, the retried build
	// will build from the tip of that branch, which may not be the same revision
	// as the original build.
	// * If the original build specified a commit sha or revision ID, the retried
	// build will use the identical source.
	//
	// For builds that specify `StorageSource`:
	//
	// * If the original build pulled source from Google Cloud Storage without
	// specifying the generation of the object, the new build will use the current
	// object, which may be different from the original build source.
	// * If the original build pulled source from Cloud Storage and specified the
	// generation of the object, the new build will attempt to use the same
	// object, which may or may not be available depending on the bucket's
	// lifecycle management settings.
	RetryBuild(ctx context.Context, in *RetryBuildRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
	// Creates a new `BuildTrigger`.
	//
	// This API is experimental.
	CreateBuildTrigger(ctx context.Context, in *CreateBuildTriggerRequest, opts ...grpc.CallOption) (*BuildTrigger, error)
	// Returns information about a `BuildTrigger`.
	//
	// This API is experimental.
	GetBuildTrigger(ctx context.Context, in *GetBuildTriggerRequest, opts ...grpc.CallOption) (*BuildTrigger, error)
	// Lists existing `BuildTrigger`s.
	//
	// This API is experimental.
	ListBuildTriggers(ctx context.Context, in *ListBuildTriggersRequest, opts ...grpc.CallOption) (*ListBuildTriggersResponse, error)
	// Deletes a `BuildTrigger` by its project ID and trigger ID.
	//
	// This API is experimental.
	DeleteBuildTrigger(ctx context.Context, in *DeleteBuildTriggerRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Updates a `BuildTrigger` by its project ID and trigger ID.
	//
	// This API is experimental.
	UpdateBuildTrigger(ctx context.Context, in *UpdateBuildTriggerRequest, opts ...grpc.CallOption) (*BuildTrigger, error)
	// Runs a `BuildTrigger` at a particular source revision.
	RunBuildTrigger(ctx context.Context, in *RunBuildTriggerRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
}

type cloudBuildClient struct {
	cc *grpc.ClientConn
}

func NewCloudBuildClient(cc *grpc.ClientConn) CloudBuildClient {
	return &cloudBuildClient{cc}
}

func (c *cloudBuildClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/CreateBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/GetBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/ListBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/CancelBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) RetryBuild(ctx context.Context, in *RetryBuildRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/RetryBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) CreateBuildTrigger(ctx context.Context, in *CreateBuildTriggerRequest, opts ...grpc.CallOption) (*BuildTrigger, error) {
	out := new(BuildTrigger)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/CreateBuildTrigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) GetBuildTrigger(ctx context.Context, in *GetBuildTriggerRequest, opts ...grpc.CallOption) (*BuildTrigger, error) {
	out := new(BuildTrigger)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/GetBuildTrigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) ListBuildTriggers(ctx context.Context, in *ListBuildTriggersRequest, opts ...grpc.CallOption) (*ListBuildTriggersResponse, error) {
	out := new(ListBuildTriggersResponse)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/ListBuildTriggers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) DeleteBuildTrigger(ctx context.Context, in *DeleteBuildTriggerRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/DeleteBuildTrigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) UpdateBuildTrigger(ctx context.Context, in *UpdateBuildTriggerRequest, opts ...grpc.CallOption) (*BuildTrigger, error) {
	out := new(BuildTrigger)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/UpdateBuildTrigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBuildClient) RunBuildTrigger(ctx context.Context, in *RunBuildTriggerRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.devtools.cloudbuild.v1.CloudBuild/RunBuildTrigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudBuild service

type CloudBuildServer interface {
	// Starts a build with the specified configuration.
	//
	// This method returns a long-running `Operation`, which includes the build
	// ID. Pass the build ID to `GetBuild` to determine the build status (such as
	// `SUCCESS` or `FAILURE`).
	CreateBuild(context.Context, *CreateBuildRequest) (*google_longrunning.Operation, error)
	// Returns information about a previously requested build.
	//
	// The `Build` that is returned includes its status (such as `SUCCESS`,
	// `FAILURE`, or `WORKING`), and timing information.
	GetBuild(context.Context, *GetBuildRequest) (*Build, error)
	// Lists previously requested builds.
	//
	// Previously requested builds may still be in-progress, or may have finished
	// successfully or unsuccessfully.
	ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	// Cancels a build in progress.
	CancelBuild(context.Context, *CancelBuildRequest) (*Build, error)
	// Creates a new build based on the specified build.
	//
	// This method creates a new build using the original build request, which may
	// or may not result in an identical build.
	//
	// For triggered builds:
	//
	// * Triggered builds resolve to a precise revision; therefore a retry of a
	// triggered build will result in a build that uses the same revision.
	//
	// For non-triggered builds that specify `RepoSource`:
	//
	// * If the original build built from the tip of a branch, the retried build
	// will build from the tip of that branch, which may not be the same revision
	// as the original build.
	// * If the original build specified a commit sha or revision ID, the retried
	// build will use the identical source.
	//
	// For builds that specify `StorageSource`:
	//
	// * If the original build pulled source from Google Cloud Storage without
	// specifying the generation of the object, the new build will use the current
	// object, which may be different from the original build source.
	// * If the original build pulled source from Cloud Storage and specified the
	// generation of the object, the new build will attempt to use the same
	// object, which may or may not be available depending on the bucket's
	// lifecycle management settings.
	RetryBuild(context.Context, *RetryBuildRequest) (*google_longrunning.Operation, error)
	// Creates a new `BuildTrigger`.
	//
	// This API is experimental.
	CreateBuildTrigger(context.Context, *CreateBuildTriggerRequest) (*BuildTrigger, error)
	// Returns information about a `BuildTrigger`.
	//
	// This API is experimental.
	GetBuildTrigger(context.Context, *GetBuildTriggerRequest) (*BuildTrigger, error)
	// Lists existing `BuildTrigger`s.
	//
	// This API is experimental.
	ListBuildTriggers(context.Context, *ListBuildTriggersRequest) (*ListBuildTriggersResponse, error)
	// Deletes a `BuildTrigger` by its project ID and trigger ID.
	//
	// This API is experimental.
	DeleteBuildTrigger(context.Context, *DeleteBuildTriggerRequest) (*google_protobuf3.Empty, error)
	// Updates a `BuildTrigger` by its project ID and trigger ID.
	//
	// This API is experimental.
	UpdateBuildTrigger(context.Context, *UpdateBuildTriggerRequest) (*BuildTrigger, error)
	// Runs a `BuildTrigger` at a particular source revision.
	RunBuildTrigger(context.Context, *RunBuildTriggerRequest) (*google_longrunning.Operation, error)
}

func RegisterCloudBuildServer(s *grpc.Server, srv CloudBuildServer) {
	s.RegisterService(&_CloudBuild_serviceDesc, srv)
}

func _CloudBuild_CreateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).CreateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/CreateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).CreateBuild(ctx, req.(*CreateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_CancelBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).CancelBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/CancelBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).CancelBuild(ctx, req.(*CancelBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_RetryBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).RetryBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/RetryBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).RetryBuild(ctx, req.(*RetryBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_CreateBuildTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).CreateBuildTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/CreateBuildTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).CreateBuildTrigger(ctx, req.(*CreateBuildTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_GetBuildTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).GetBuildTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/GetBuildTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).GetBuildTrigger(ctx, req.(*GetBuildTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_ListBuildTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).ListBuildTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/ListBuildTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).ListBuildTriggers(ctx, req.(*ListBuildTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_DeleteBuildTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuildTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).DeleteBuildTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/DeleteBuildTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).DeleteBuildTrigger(ctx, req.(*DeleteBuildTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_UpdateBuildTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).UpdateBuildTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/UpdateBuildTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).UpdateBuildTrigger(ctx, req.(*UpdateBuildTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBuild_RunBuildTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBuildTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBuildServer).RunBuildTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.cloudbuild.v1.CloudBuild/RunBuildTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBuildServer).RunBuildTrigger(ctx, req.(*RunBuildTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudBuild_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.cloudbuild.v1.CloudBuild",
	HandlerType: (*CloudBuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuild",
			Handler:    _CloudBuild_CreateBuild_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _CloudBuild_GetBuild_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _CloudBuild_ListBuilds_Handler,
		},
		{
			MethodName: "CancelBuild",
			Handler:    _CloudBuild_CancelBuild_Handler,
		},
		{
			MethodName: "RetryBuild",
			Handler:    _CloudBuild_RetryBuild_Handler,
		},
		{
			MethodName: "CreateBuildTrigger",
			Handler:    _CloudBuild_CreateBuildTrigger_Handler,
		},
		{
			MethodName: "GetBuildTrigger",
			Handler:    _CloudBuild_GetBuildTrigger_Handler,
		},
		{
			MethodName: "ListBuildTriggers",
			Handler:    _CloudBuild_ListBuildTriggers_Handler,
		},
		{
			MethodName: "DeleteBuildTrigger",
			Handler:    _CloudBuild_DeleteBuildTrigger_Handler,
		},
		{
			MethodName: "UpdateBuildTrigger",
			Handler:    _CloudBuild_UpdateBuildTrigger_Handler,
		},
		{
			MethodName: "RunBuildTrigger",
			Handler:    _CloudBuild_RunBuildTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/devtools/cloudbuild/v1/cloudbuild.proto",
}

func init() { proto.RegisterFile("google/devtools/cloudbuild/v1/cloudbuild.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x1a, 0x5b, 0x73, 0xe3, 0x56,
	0x39, 0xb2, 0x13, 0x5f, 0x3e, 0xe7, 0xa2, 0x3d, 0xdd, 0xa6, 0x8a, 0xb7, 0xdb, 0x4d, 0xd5, 0x5b,
	0xba, 0xdb, 0xda, 0x4d, 0x96, 0xed, 0x6e, 0xd3, 0xcb, 0x6e, 0xe2, 0x38, 0x97, 0x69, 0xe2, 0x2c,
	0xb2, 0xbd, 0x1d, 0x0a, 0x8c, 0x90, 0xad, 0x13, 0x45, 0x44, 0x96, 0x84, 0x74, 0x6c, 0x48, 0x4b,
	0x07, 0xe8, 0x0c, 0xbc, 0xc2, 0x0c, 0xc3, 0x03, 0xc3, 0x03, 0x97, 0x67, 0x86, 0x61, 0xe0, 0x81,
	0x19, 0x86, 0x3e, 0x33, 0xc3, 0x2b, 0x4f, 0xbc, 0xf3, 0x43, 0x98, 0x73, 0x91, 0x2d, 0xdb, 0xbb,
	0xc8, 0xea, 0xc2, 0x4b, 0xa2, 0xf3, 0x9d, 0xf3, 0x5d, 0xce, 0x77, 0xff, 0x24, 0x43, 0xc5, 0xf2,
	0x3c, 0xcb, 0xc1, 0x55, 0x13, 0x0f, 0x88, 0xe7, 0x39, 0x61, 0xb5, 0xeb, 0x78, 0x7d, 0xb3, 0xd3,
	0xb7, 0x1d, 0xb3, 0x3a, 0xd8, 0x8c, 0xad, 0x2a, 0x7e, 0xe0, 0x11, 0x0f, 0x5d, 0xe7, 0xe7, 0x2b,
	0xd1, 0xf9, 0x4a, 0xec, 0xc4, 0x60, 0xb3, 0xfc, 0xbc, 0x20, 0x67, 0xf8, 0x76, 0xd5, 0x70, 0x5d,
	0x8f, 0x18, 0xc4, 0xf6, 0xdc, 0x90, 0x23, 0x97, 0xd7, 0x62, 0xbb, 0xe7, 0x84, 0xf8, 0x1d, 0xcf,
	0xbc, 0x14, 0x5b, 0xaa, 0xd8, 0x62, 0xe4, 0xaa, 0x46, 0xdf, 0xb4, 0x09, 0xff, 0xab, 0x3b, 0x9e,
	0x25, 0xce, 0xbc, 0x24, 0xce, 0x38, 0x9e, 0x6b, 0x05, 0x7d, 0xd7, 0xb5, 0x5d, 0xab, 0xea, 0xf9,
	0x38, 0x18, 0xe3, 0xf1, 0x82, 0x38, 0xc4, 0x56, 0x9d, 0xfe, 0x59, 0xd5, 0xec, 0xf3, 0x03, 0x62,
	0xff, 0xda, 0xe4, 0x3e, 0xee, 0xf9, 0x24, 0x92, 0xe2, 0xc6, 0xe4, 0x26, 0xb1, 0x7b, 0x38, 0x24,
	0x46, 0xcf, 0xe7, 0x07, 0xd4, 0x5d, 0xb8, 0xa2, 0x61, 0x12, 0x5c, 0xee, 0xd2, 0x0b, 0x6b, 0xf8,
	0x3b, 0x7d, 0x1c, 0x12, 0x74, 0x1d, 0xc0, 0x0f, 0xbc, 0x6f, 0xe3, 0x2e, 0xd1, 0x6d, 0x53, 0x91,
	0xd6, 0xa5, 0x8d, 0xa2, 0x56, 0x14, 0x90, 0x23, 0x13, 0x2d, 0x43, 0xc6, 0x36, 0x95, 0x0c, 0x03,
	0x67, 0x6c, 0x53, 0xfd, 0xa5, 0x04, 0xab, 0x5a, 0xdf, 0x65, 0x24, 0x5a, 0x81, 0x6d, 0x59, 0x38,
	0x98, 0x91, 0xd2, 0x75, 0x00, 0xc2, 0x11, 0xf4, 0x21, 0xc5, 0xa2, 0x80, 0x1c, 0x99, 0x68, 0x07,
	0x72, 0xa1, 0xd7, 0x0f, 0xba, 0x58, 0xc9, 0xae, 0x4b, 0x1b, 0xa5, 0xad, 0xd7, 0x2b, 0xff, 0xd5,
	0x58, 0x15, 0x0d, 0xfb, 0x5e, 0x93, 0x21, 0x68, 0x02, 0x51, 0xd5, 0x61, 0xa9, 0x49, 0xbc, 0xc0,
	0xb0, 0x30, 0xdf, 0x40, 0xab, 0x90, 0xeb, 0xf4, 0xbb, 0x17, 0x98, 0x08, 0x69, 0xc4, 0x8a, 0xc2,
	0xbd, 0x0e, 0x15, 0x4b, 0x88, 0x21, 0x56, 0xe8, 0x05, 0x00, 0x0b, 0xbb, 0xc2, 0x26, 0x4c, 0x8e,
	0xac, 0x16, 0x83, 0xa8, 0x7f, 0x97, 0x00, 0x46, 0x7c, 0x93, 0x2e, 0x7c, 0x0d, 0x8a, 0x01, 0xf6,
	0x3d, 0xdd, 0x35, 0x7a, 0x58, 0x30, 0x2a, 0x50, 0x40, 0xc3, 0xe8, 0x61, 0xf4, 0x22, 0x94, 0x3a,
	0x81, 0xe1, 0x76, 0xcf, 0xf9, 0x36, 0xe5, 0x55, 0x3c, 0x9c, 0xd3, 0x80, 0x03, 0xd9, 0x91, 0x6b,
	0x50, 0x20, 0x86, 0xc5, 0xf7, 0xe7, 0xc5, 0x7e, 0x9e, 0x18, 0x16, 0xdb, 0xbc, 0x01, 0xd0, 0xf5,
	0x7a, 0x3d, 0x9b, 0xe8, 0xe1, 0xb9, 0xa1, 0x2c, 0x88, 0xed, 0x22, 0x87, 0x35, 0xcf, 0x0d, 0x24,
	0x43, 0xd6, 0xb4, 0x03, 0x25, 0xcf, 0xf8, 0xd2, 0xc7, 0x5d, 0x80, 0x42, 0x80, 0x07, 0x76, 0x48,
	0x6f, 0xf2, 0x17, 0x09, 0x72, 0xe2, 0x16, 0x6d, 0x58, 0x0e, 0xb9, 0xd6, 0x74, 0x61, 0x80, 0x0c,
	0x33, 0xc0, 0x1b, 0x09, 0x06, 0x18, 0x53, 0xf5, 0xe1, 0x9c, 0xb6, 0x14, 0x8e, 0xe9, 0xfe, 0x18,
	0x4a, 0xec, 0xf6, 0x5f, 0xd2, 0xa8, 0x54, 0x17, 0xc1, 0x70, 0xb5, 0x5b, 0x88, 0xbc, 0x43, 0xfd,
	0x5c, 0x02, 0xa0, 0xde, 0x47, 0x8e, 0x7a, 0x86, 0x85, 0x11, 0x82, 0x79, 0xa6, 0x20, 0xae, 0x7d,
	0xf6, 0x4c, 0xcd, 0x6b, 0xda, 0x16, 0x0e, 0x09, 0x57, 0xab, 0x26, 0x56, 0xe8, 0x10, 0x4a, 0x7e,
	0x3f, 0x3c, 0xd7, 0x89, 0xdd, 0xb3, 0x5d, 0x8b, 0xe9, 0xb4, 0xb4, 0xf5, 0x5a, 0x82, 0x48, 0x2d,
	0xbb, 0x87, 0x9b, 0xbe, 0xe1, 0x6a, 0x40, 0x71, 0x5b, 0x0c, 0x55, 0xfd, 0x22, 0x0b, 0x45, 0x16,
	0x02, 0x4d, 0x82, 0xfd, 0xc7, 0xca, 0x20, 0x43, 0x16, 0xbb, 0x03, 0x25, 0xb3, 0x9e, 0xa5, 0xea,
	0xc7, 0xee, 0x80, 0x9e, 0x32, 0x02, 0x2b, 0x54, 0xb2, 0x0c, 0xc4, 0x9e, 0x23, 0x23, 0xcd, 0x0f,
	0x8d, 0x24, 0xe2, 0x6d, 0x21, 0x8a, 0x37, 0xb4, 0x06, 0x85, 0xef, 0x1a, 0x36, 0xd1, 0xcf, 0xbc,
	0x40, 0xc9, 0x31, 0xcc, 0x3c, 0x5d, 0xef, 0x7b, 0x01, 0xf5, 0x56, 0xec, 0x92, 0xe0, 0xd2, 0xf7,
	0x6c, 0x97, 0x08, 0x43, 0xc7, 0x20, 0xd4, 0x3d, 0x43, 0xdc, 0x0d, 0x30, 0xd1, 0xa9, 0x24, 0x05,
	0x86, 0x5c, 0xe4, 0x90, 0xba, 0x3b, 0x40, 0xf7, 0x21, 0x3f, 0xf0, 0x9c, 0x7e, 0x0f, 0x87, 0x4a,
	0x71, 0x3d, 0xbb, 0x51, 0xda, 0x7a, 0x25, 0x41, 0x13, 0x8f, 0xd8, 0x69, 0x2d, 0xc2, 0x42, 0xf7,
	0x21, 0x27, 0x34, 0x09, 0xe9, 0x34, 0x29, 0xd0, 0xd0, 0x6d, 0xc8, 0xd3, 0x14, 0xe5, 0xf5, 0x89,
	0x52, 0x62, 0x14, 0xd6, 0x22, 0x0a, 0x51, 0x0a, 0xab, 0xec, 0x89, 0xfc, 0xa7, 0x45, 0x27, 0x51,
	0x0d, 0x72, 0x21, 0x31, 0x48, 0x3f, 0x54, 0x16, 0xd7, 0xa5, 0x8d, 0xe5, 0xad, 0x5b, 0x09, 0x5c,
	0x99, 0x99, 0x2a, 0x4d, 0x86, 0xa2, 0x09, 0x54, 0xf5, 0x2d, 0xc8, 0xf1, 0xdb, 0x3c, 0xd6, 0x76,
	0x08, 0xe6, 0x7d, 0x83, 0x9c, 0x8b, 0x98, 0x65, 0xcf, 0xea, 0x3f, 0x24, 0xc8, 0x6b, 0x38, 0xec,
	0x3b, 0x24, 0xa4, 0xa9, 0xca, 0xa6, 0xce, 0x17, 0x32, 0xf3, 0x26, 0x7b, 0xf5, 0xc8, 0x5d, 0x35,
	0x81, 0x88, 0x6e, 0xc2, 0x15, 0xb6, 0xad, 0x87, 0x04, 0xfb, 0xba, 0xa0, 0xc6, 0x3d, 0x63, 0xa5,
	0x13, 0x39, 0xd6, 0x11, 0x3f, 0x7b, 0x0b, 0xae, 0x18, 0x01, 0xb1, 0xcf, 0x8c, 0x2e, 0xd1, 0x7b,
	0x86, 0x6b, 0x9f, 0x51, 0xcf, 0xe6, 0x2e, 0x23, 0x47, 0x1b, 0x27, 0x02, 0x8e, 0x5e, 0x82, 0x25,
	0xb7, 0xdf, 0xd3, 0x23, 0x78, 0xc8, 0x5c, 0x29, 0xab, 0x2d, 0xba, 0xfd, 0xde, 0x4e, 0x04, 0x53,
	0xff, 0x55, 0x82, 0x05, 0xa6, 0x17, 0xe1, 0x6e, 0xd2, 0xd0, 0xdd, 0xc6, 0x53, 0x9a, 0x3c, 0x99,
	0xd2, 0x46, 0xca, 0xcf, 0x7c, 0x69, 0xe5, 0x53, 0x11, 0xf9, 0x93, 0x6e, 0x62, 0x62, 0xd8, 0x8e,
	0xa2, 0x30, 0x36, 0x8b, 0x1c, 0xb8, 0xc7, 0x60, 0xe8, 0xfd, 0x89, 0x72, 0x90, 0xe4, 0x9c, 0xe3,
	0xa5, 0x00, 0x7d, 0x00, 0x0b, 0x54, 0xb3, 0xa1, 0x52, 0x62, 0x16, 0xda, 0x98, 0x45, 0x4e, 0xaa,
	0x72, 0x8d, 0xa3, 0xa1, 0x07, 0x90, 0x0f, 0xb8, 0xb5, 0x85, 0x73, 0xbf, 0x9a, 0x98, 0xb9, 0xd8,
	0x69, 0x2d, 0x42, 0x43, 0xef, 0x42, 0xa9, 0x1b, 0x60, 0x83, 0x60, 0x9a, 0x6e, 0xb0, 0x92, 0x63,
	0x54, 0xca, 0x53, 0x0e, 0xde, 0x8a, 0x6a, 0xb4, 0x06, 0xfc, 0x38, 0x05, 0xa0, 0x77, 0x00, 0x42,
	0x62, 0x04, 0x84, 0xe3, 0xe6, 0x13, 0x71, 0x8b, 0xec, 0x34, 0x43, 0x7d, 0x17, 0x4a, 0x67, 0xb6,
	0x6b, 0xf3, 0x34, 0x87, 0x95, 0x42, 0x32, 0x5f, 0x7e, 0x9c, 0x21, 0xc7, 0x22, 0x72, 0x71, 0xe6,
	0x88, 0x5c, 0x1d, 0x86, 0xc3, 0x12, 0x73, 0xe0, 0xc8, 0xc7, 0xf7, 0xa1, 0x38, 0x72, 0xc3, 0x57,
	0x18, 0xb9, 0x24, 0x3b, 0x0c, 0x5d, 0x54, 0x1b, 0xa1, 0xa2, 0x1b, 0x50, 0x72, 0x3c, 0x2b, 0xd4,
	0x45, 0x29, 0x7f, 0x86, 0x27, 0x3a, 0x0a, 0xda, 0xe5, 0xe5, 0xfc, 0x1b, 0x70, 0x85, 0x9b, 0x5d,
	0xf7, 0x03, 0x6f, 0x80, 0x5d, 0xc3, 0xed, 0x62, 0xe5, 0x59, 0xc6, 0xb0, 0x3a, 0x93, 0xdb, 0x3c,
	0x1c, 0xa2, 0x69, 0x72, 0x38, 0x01, 0x41, 0x1b, 0x20, 0xf3, 0x50, 0x8d, 0x75, 0x2f, 0xab, 0x4c,
	0x86, 0xe5, 0x4e, 0xac, 0x0b, 0x3a, 0x32, 0x51, 0x1d, 0xf2, 0x9e, 0xcf, 0xda, 0x39, 0xe5, 0x39,
	0xc6, 0x7d, 0xa6, 0xf0, 0x38, 0xe5, 0x28, 0x5a, 0x84, 0x8b, 0x9e, 0x83, 0xbc, 0xe3, 0x59, 0x7a,
	0x3f, 0x70, 0x94, 0x35, 0x5e, 0xbf, 0x1c, 0xcf, 0x6a, 0x07, 0x0e, 0xfa, 0x26, 0x2c, 0x85, 0xfd,
	0x4e, 0x48, 0x6c, 0xd2, 0xe7, 0x5c, 0xae, 0x33, 0xe7, 0xbe, 0x3b, 0x5b, 0x10, 0xc6, 0x31, 0xeb,
	0xb4, 0x4a, 0x68, 0xe3, 0xd4, 0x68, 0xda, 0x23, 0x86, 0x15, 0x2a, 0x37, 0x78, 0x81, 0xa2, 0xcf,
	0xb4, 0x48, 0xf0, 0x8a, 0x11, 0x2a, 0xeb, 0x33, 0x15, 0x89, 0x26, 0x3b, 0xad, 0x45, 0x58, 0xe8,
	0x70, 0x58, 0x24, 0x5e, 0x64, 0xf8, 0x6f, 0xcd, 0x24, 0x2c, 0x2f, 0xb3, 0x5c, 0x4a, 0x81, 0x5f,
	0x7e, 0x00, 0x68, 0xfa, 0x0e, 0xb4, 0x82, 0x5e, 0xe0, 0x4b, 0x91, 0xc1, 0xe8, 0x23, 0xba, 0x0a,
	0x0b, 0x03, 0xc3, 0xe9, 0x47, 0x2d, 0x17, 0x5f, 0x6c, 0x67, 0xee, 0x49, 0xe5, 0x0e, 0x94, 0x62,
	0x84, 0x1f, 0x83, 0xfa, 0x7e, 0x1c, 0x35, 0x45, 0x41, 0x1b, 0xf1, 0x50, 0x7f, 0x00, 0x39, 0x9e,
	0xee, 0x10, 0x82, 0xe5, 0x66, 0x6b, 0xa7, 0xd5, 0x6e, 0xea, 0xed, 0xc6, 0x87, 0x8d, 0xd3, 0x8f,
	0x1a, 0xf2, 0x1c, 0x02, 0xc8, 0x7d, 0xb5, 0x5d, 0x6f, 0xd7, 0xf7, 0x64, 0x09, 0x95, 0x20, 0xff,
	0xd1, 0xa9, 0xf6, 0xe1, 0x51, 0xe3, 0x40, 0xce, 0xd0, 0x45, 0xb3, 0x5d, 0xab, 0xd5, 0x9b, 0x4d,
	0x39, 0x4b, 0x17, 0xfb, 0x3b, 0x47, 0xc7, 0x6d, 0xad, 0x2e, 0xcf, 0x53, 0x32, 0x47, 0x8d, 0x56,
	0x5d, 0x6b, 0xec, 0x1c, 0xeb, 0x75, 0x4d, 0x3b, 0xd5, 0xe4, 0x05, 0x7a, 0xa0, 0x75, 0x74, 0x52,
	0x3f, 0x6d, 0xb7, 0xe4, 0x1c, 0x5a, 0x82, 0x62, 0x6d, 0xa7, 0x51, 0xab, 0x1f, 0x1f, 0xd7, 0xf7,
	0xe4, 0xbc, 0xfa, 0x37, 0x09, 0x8a, 0xc3, 0x30, 0x8a, 0xc5, 0xa6, 0x34, 0x16, 0x9b, 0x1a, 0xe4,
	0x79, 0xcf, 0x1b, 0x8a, 0xbb, 0xde, 0x9b, 0x35, 0x32, 0x87, 0x4f, 0xa7, 0x1c, 0x5f, 0x8b, 0x08,
	0x95, 0x6b, 0xb0, 0x32, 0xb1, 0x87, 0xca, 0x50, 0x70, 0xbc, 0x2e, 0x6f, 0xa7, 0xb9, 0x9e, 0x87,
	0x6b, 0x6a, 0x27, 0x5a, 0x59, 0x43, 0xd1, 0x23, 0xf1, 0x85, 0xfa, 0x7d, 0x28, 0x44, 0x6a, 0x9d,
	0xc8, 0x82, 0x52, 0x9a, 0x2c, 0x78, 0x07, 0x0a, 0xd8, 0x35, 0x39, 0x62, 0x26, 0x11, 0x31, 0x8f,
	0x5d, 0x93, 0xae, 0xd4, 0x16, 0xac, 0x8a, 0x98, 0x14, 0x2d, 0xff, 0x09, 0x26, 0x86, 0x69, 0x10,
	0x03, 0x6d, 0xc3, 0x02, 0xd3, 0x85, 0x10, 0xe3, 0xe5, 0x59, 0xdc, 0x58, 0xe3, 0x28, 0xea, 0x6f,
	0xb3, 0x20, 0x4f, 0x26, 0x1a, 0x64, 0xc2, 0x73, 0x01, 0x0e, 0x3d, 0x67, 0x80, 0x69, 0x13, 0x30,
	0xd6, 0x7f, 0x67, 0xd3, 0xf7, 0xdf, 0xda, 0xb3, 0x11, 0xb1, 0xf1, 0x09, 0xe8, 0xeb, 0x70, 0x75,
	0xc8, 0x25, 0xde, 0x8e, 0xe7, 0xd2, 0xce, 0x58, 0x28, 0x22, 0x13, 0x9b, 0x7f, 0xbe, 0x45, 0x4b,
	0x8d, 0x83, 0xf5, 0x73, 0x23, 0x3c, 0xc7, 0xa1, 0x32, 0xcf, 0x02, 0xfc, 0x7e, 0xca, 0x8c, 0x5b,
	0xd9, 0xb7, 0x1d, 0x7c, 0xc8, 0x28, 0xf0, 0x78, 0x87, 0xb3, 0x21, 0xa0, 0x7c, 0x0e, 0x2b, 0x13,
	0xdb, 0x8f, 0x89, 0xda, 0xfb, 0xe3, 0x51, 0x9b, 0x74, 0xa9, 0x11, 0xc1, 0x78, 0xdc, 0x36, 0x00,
	0x46, 0x1b, 0xe8, 0x01, 0x14, 0x87, 0x37, 0x63, 0x91, 0x53, 0xda, 0x7a, 0x29, 0x81, 0x2c, 0xc5,
	0xd4, 0x0a, 0x91, 0xec, 0xea, 0x0f, 0x25, 0x98, 0xa7, 0x0f, 0xe8, 0x01, 0xcc, 0x93, 0x4b, 0x9f,
	0xbb, 0xef, 0x72, 0xa2, 0x51, 0x29, 0x0a, 0xfb, 0xd3, 0xba, 0xf4, 0xb1, 0xc6, 0x30, 0xc7, 0x13,
	0xda, 0xa2, 0x10, 0x5a, 0x5d, 0x87, 0x42, 0x74, 0x0e, 0x15, 0x60, 0xbe, 0x71, 0xda, 0xa8, 0xf3,
	0x04, 0xd3, 0x3c, 0xdc, 0xd9, 0xba, 0xf3, 0xb6, 0x2c, 0xa9, 0x5f, 0xd0, 0x19, 0x8f, 0xa5, 0x61,
	0xb4, 0x0e, 0x8b, 0x17, 0xbd, 0x50, 0xbf, 0xc0, 0x97, 0x7a, 0xac, 0xdb, 0x85, 0x8b, 0x5e, 0xf8,
	0x21, 0xbe, 0x64, 0xf3, 0x64, 0x73, 0x6c, 0x58, 0xc8, 0xb2, 0x2b, 0x7f, 0x65, 0xa6, 0x5c, 0x2f,
	0xfe, 0xd5, 0xdd, 0x01, 0xb7, 0xdf, 0x68, 0xc4, 0x28, 0xbf, 0x07, 0xcb, 0xe3, 0x9b, 0x49, 0xe9,
	0x7a, 0x31, 0x6e, 0x12, 0x0f, 0x50, 0x8d, 0xb5, 0x44, 0x69, 0xde, 0x57, 0x0c, 0xe3, 0x34, 0x93,
	0x3e, 0x4e, 0x1f, 0xc0, 0xca, 0x01, 0x26, 0x4f, 0xf3, 0x76, 0xe4, 0x27, 0x12, 0x5c, 0x39, 0xb6,
	0x43, 0x4e, 0x23, 0x9c, 0x91, 0xc8, 0x35, 0x28, 0xfa, 0x2c, 0xfa, 0xed, 0x4f, 0xb8, 0x16, 0x16,
	0xb4, 0x02, 0x05, 0x34, 0xed, 0x4f, 0xf8, 0x3b, 0x06, 0xba, 0x49, 0xbc, 0x0b, 0xec, 0x8a, 0x79,
	0x96, 0x1d, 0x6f, 0x51, 0x00, 0xcd, 0xef, 0x67, 0xb6, 0x43, 0x70, 0xc0, 0x1a, 0xbd, 0xa2, 0x26,
	0x56, 0xea, 0x27, 0x80, 0xe2, 0x72, 0x84, 0xbe, 0xe7, 0x86, 0x18, 0xbd, 0x07, 0x39, 0x76, 0xd3,
	0x50, 0xf8, 0xf4, 0x6c, 0xda, 0x11, 0x38, 0xe8, 0x55, 0x58, 0x71, 0xf1, 0xf7, 0x88, 0x1e, 0x93,
	0x87, 0xdf, 0x7c, 0x89, 0x82, 0x1f, 0x46, 0x32, 0xa9, 0x35, 0x40, 0x35, 0x1a, 0xd9, 0xce, 0xd3,
	0x68, 0xf2, 0xc7, 0xf3, 0xb0, 0x18, 0x7f, 0xc9, 0x34, 0x35, 0xa9, 0xac, 0x43, 0xc9, 0xc4, 0x61,
	0x37, 0xb0, 0x59, 0xd7, 0xc4, 0xba, 0xf4, 0xa2, 0x16, 0x07, 0xa1, 0x16, 0xc8, 0x51, 0xcb, 0x46,
	0x70, 0xcf, 0x77, 0x0c, 0x12, 0xb5, 0xd2, 0x29, 0xf2, 0xde, 0x8a, 0x20, 0xd1, 0x12, 0x14, 0xd0,
	0x7b, 0x91, 0x83, 0xcd, 0xcf, 0xee, 0x60, 0x87, 0x73, 0xc2, 0xc5, 0xd0, 0xf3, 0xc0, 0x52, 0x04,
	0x0b, 0xc2, 0x82, 0x78, 0x69, 0x33, 0x84, 0x4c, 0xce, 0x0c, 0x0b, 0xa9, 0x66, 0x86, 0x32, 0x14,
	0x4c, 0x3b, 0x34, 0x3a, 0x0e, 0x36, 0x95, 0xe2, 0xba, 0xb4, 0x51, 0xd0, 0x86, 0x6b, 0x64, 0x4e,
	0x76, 0x8e, 0x7c, 0x2c, 0xfa, 0x60, 0x16, 0xe1, 0x85, 0x01, 0x92, 0x1b, 0xc8, 0xa7, 0xef, 0xd0,
	0x76, 0x65, 0x58, 0x16, 0xbd, 0xb6, 0x50, 0xb7, 0xfa, 0x23, 0x09, 0xd6, 0x62, 0x59, 0x20, 0xdd,
	0x2b, 0xc7, 0x3a, 0xe4, 0x85, 0xf9, 0x44, 0x3a, 0xb8, 0x95, 0xe2, 0xc2, 0x5a, 0x84, 0xab, 0x3e,
	0x82, 0xd5, 0x28, 0x2f, 0xfc, 0x2f, 0x5f, 0x79, 0xaa, 0xef, 0x80, 0x32, 0x0c, 0x52, 0x41, 0x78,
	0xc6, 0x9c, 0xa1, 0x9a, 0xb0, 0xf6, 0x18, 0x54, 0x11, 0xe6, 0x07, 0x50, 0x10, 0x4c, 0xa2, 0x40,
	0x4f, 0x75, 0xef, 0x21, 0xb2, 0xfa, 0x35, 0x58, 0xdb, 0xc3, 0x0e, 0xfe, 0x52, 0xba, 0x4f, 0xb8,
	0xfb, 0x6f, 0x24, 0x58, 0x6b, 0xfb, 0xa6, 0xf1, 0x7f, 0xa0, 0x1d, 0x37, 0x7b, 0xf6, 0x29, 0xcc,
	0xfe, 0xd7, 0x9c, 0x48, 0x41, 0x62, 0x42, 0x43, 0x1d, 0x58, 0x9d, 0x9a, 0x33, 0x47, 0x2d, 0x42,
	0xda, 0xe2, 0x7e, 0x75, 0x72, 0xd2, 0x64, 0xed, 0x82, 0x4f, 0xdb, 0x42, 0xa6, 0x04, 0x6c, 0xea,
	0x03, 0x1c, 0xd8, 0x67, 0x97, 0x3a, 0x1f, 0x0c, 0xc5, 0x2b, 0x97, 0x7b, 0x29, 0x66, 0xca, 0xca,
	0x23, 0x46, 0x80, 0xaf, 0x68, 0x8b, 0x28, 0x08, 0xc7, 0xc1, 0xe8, 0x63, 0x58, 0xec, 0x19, 0xdd,
	0x73, 0xdb, 0xc5, 0x3a, 0x6b, 0x54, 0xb2, 0x8c, 0xcd, 0xdd, 0x34, 0x6c, 0x4e, 0x38, 0x3e, 0xbb,
	0x56, 0xa9, 0x37, 0x5a, 0xd0, 0xbe, 0xc3, 0xb4, 0xc3, 0x0b, 0x56, 0xda, 0x74, 0xab, 0xc3, 0xda,
	0xce, 0xac, 0x06, 0x14, 0x46, 0xab, 0xdb, 0x41, 0x07, 0x79, 0xf0, 0x4c, 0x3c, 0x89, 0x44, 0x77,
	0x9d, 0x67, 0x42, 0x7c, 0x90, 0x46, 0x88, 0x78, 0xea, 0x11, 0x37, 0x46, 0xe1, 0x14, 0x0c, 0xf9,
	0x70, 0x95, 0x4e, 0xd7, 0x21, 0x09, 0xb0, 0x41, 0x67, 0xc1, 0x88, 0xe3, 0x42, 0x7a, 0x8e, 0xc7,
	0x9e, 0xd5, 0x8c, 0xc8, 0x44, 0x1c, 0x9d, 0x29, 0x98, 0x5a, 0x81, 0xc5, 0x31, 0x85, 0xcb, 0xb0,
	0xd8, 0x38, 0x6d, 0xe9, 0x8f, 0xea, 0xda, 0xd1, 0xfe, 0x51, 0x7d, 0x4f, 0x9e, 0x43, 0x8b, 0x50,
	0x18, 0xae, 0x24, 0xb5, 0x06, 0xa5, 0x98, 0x42, 0xd1, 0x0a, 0x94, 0xda, 0x8d, 0xe6, 0xc3, 0x7a,
	0x2d, 0x3a, 0x4d, 0xf1, 0x37, 0xf5, 0xc3, 0xa3, 0x83, 0xc3, 0xda, 0xc3, 0xb6, 0x7e, 0x4f, 0x96,
	0xd0, 0x15, 0x58, 0x8a, 0x41, 0x6e, 0x6f, 0xc9, 0x19, 0xf5, 0xce, 0x78, 0x2e, 0x16, 0xac, 0x97,
	0x01, 0x4e, 0xda, 0xcd, 0x96, 0x7e, 0xb2, 0xd3, 0xaa, 0x1d, 0xca, 0x73, 0x94, 0xf6, 0xce, 0xf1,
	0xf1, 0xe9, 0x47, 0xfa, 0xf1, 0xe9, 0x69, 0xb3, 0x2e, 0x4b, 0xea, 0x01, 0xa0, 0xe9, 0x5b, 0xf1,
	0x51, 0x56, 0xab, 0xef, 0x9c, 0xe8, 0x7b, 0xf5, 0xfd, 0x9d, 0xf6, 0x71, 0x4b, 0x9e, 0xa3, 0x63,
	0xa7, 0x80, 0x9d, 0x36, 0x64, 0x89, 0x52, 0x8e, 0x96, 0xfb, 0xfb, 0x72, 0x66, 0xeb, 0xcf, 0xcb,
	0x00, 0x35, 0xaa, 0x3a, 0xfe, 0x9e, 0xf1, 0x67, 0x12, 0x94, 0x62, 0x69, 0x1c, 0x6d, 0x26, 0xe8,
	0x79, 0xba, 0xf1, 0x2b, 0x5f, 0x8f, 0x50, 0x62, 0x5f, 0xd0, 0x2a, 0xc3, 0x41, 0x4d, 0xad, 0x7e,
	0xfe, 0xcf, 0x7f, 0xff, 0x3c, 0xf3, 0xba, 0xba, 0x5e, 0x1d, 0x6c, 0x56, 0x45, 0xaa, 0x08, 0xab,
	0x9f, 0x8e, 0xd2, 0xc8, 0x67, 0x55, 0xde, 0xc7, 0x6c, 0x8b, 0x52, 0xfc, 0x53, 0x09, 0x0a, 0x51,
	0x5a, 0x47, 0x95, 0x04, 0x79, 0x26, 0xfa, 0xc2, 0xf2, 0x4c, 0x65, 0x5f, 0x7d, 0x93, 0xc9, 0xf4,
	0x1a, 0x7a, 0x25, 0x49, 0xa6, 0xea, 0xa7, 0xb6, 0xf9, 0x19, 0xfa, 0x95, 0x04, 0x30, 0xea, 0xda,
	0x50, 0xd2, 0xab, 0x92, 0xa9, 0x46, 0xb3, 0xbc, 0x99, 0x02, 0x83, 0xd7, 0x0a, 0x75, 0x83, 0x89,
	0xa8, 0xa2, 0x44, 0xb5, 0xa1, 0x5f, 0x53, 0x13, 0x8e, 0xfa, 0xba, 0x64, 0x13, 0x4e, 0xf5, 0x80,
	0x33, 0x6a, 0xed, 0x2e, 0x13, 0x69, 0x53, 0x7d, 0x63, 0x26, 0xad, 0x6d, 0x77, 0x19, 0x9f, 0x6d,
	0xe9, 0x26, 0xfa, 0x05, 0xfb, 0x3c, 0x17, 0x7d, 0xe0, 0x4c, 0xd4, 0xdf, 0xd4, 0xb7, 0xd0, 0x24,
	0x17, 0x7b, 0x9b, 0x09, 0xf6, 0x96, 0x7a, 0x6b, 0x36, 0xc1, 0x02, 0x4a, 0x9f, 0xca, 0xf5, 0x47,
	0x69, 0x6c, 0x92, 0x89, 0x3a, 0xda, 0x7b, 0xb3, 0xc7, 0xc0, 0x78, 0x79, 0x2c, 0xa7, 0xa9, 0x67,
	0xea, 0x6d, 0x26, 0xf5, 0x9b, 0xaa, 0xfa, 0x64, 0xa9, 0xa3, 0x82, 0xbf, 0x1d, 0xd5, 0x3e, 0xf4,
	0x07, 0x69, 0x34, 0x0b, 0x45, 0xf2, 0xde, 0x99, 0x31, 0x46, 0x9e, 0x46, 0x58, 0x61, 0x7b, 0x54,
	0x4d, 0x16, 0xb6, 0xfa, 0xe9, 0xa8, 0x07, 0xf8, 0x0c, 0xfd, 0x29, 0x3e, 0x79, 0x45, 0x1d, 0x11,
	0xba, 0x3b, 0x6b, 0x40, 0x4c, 0xb4, 0x5f, 0xe5, 0x7b, 0xe9, 0x11, 0x45, 0x40, 0xdd, 0x64, 0x37,
	0x78, 0x19, 0xcd, 0xa0, 0x6e, 0x1a, 0x52, 0x68, 0xba, 0xc1, 0x4a, 0x74, 0x8c, 0x27, 0xf6, 0x64,
	0xe5, 0xd5, 0xa9, 0x59, 0xa1, 0xde, 0xf3, 0xc9, 0x65, 0xa4, 0xd6, 0x9b, 0xa9, 0xd5, 0xfa, 0x85,
	0x04, 0x68, 0xba, 0x4d, 0x4b, 0x94, 0xf0, 0x89, 0x9d, 0x5d, 0x3a, 0x6f, 0x78, 0xc0, 0xc4, 0xde,
	0xde, 0x4a, 0x2b, 0xf6, 0xc8, 0x8f, 0x7f, 0x2f, 0xc1, 0xca, 0xc4, 0xcf, 0x15, 0x12, 0xfd, 0xf8,
	0xf1, 0x3f, 0x6f, 0x48, 0x4a, 0x0e, 0x35, 0x26, 0xeb, 0xfb, 0xea, 0xed, 0xb4, 0xb2, 0x06, 0x7d,
	0x77, 0x5b, 0x7c, 0xb6, 0xda, 0xbd, 0x00, 0xa5, 0xeb, 0xf5, 0x22, 0x46, 0x63, 0x62, 0x3d, 0x94,
	0x3e, 0x3e, 0x10, 0x70, 0xcb, 0x73, 0x0c, 0xd7, 0xaa, 0x78, 0x81, 0x55, 0xb5, 0xb0, 0xcb, 0x4c,
	0x5d, 0xe5, 0x5b, 0x86, 0x6f, 0x87, 0x4f, 0xf8, 0x35, 0xcc, 0xbb, 0xa3, 0xd5, 0xef, 0x32, 0xd9,
	0x83, 0xda, 0x6e, 0x27, 0xc7, 0x30, 0x6f, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x8f, 0x9c,
	0x90, 0x46, 0x23, 0x00, 0x00,
}
